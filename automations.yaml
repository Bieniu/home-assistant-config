## AKCJE IOS ##

# włącz TV
- id: ios_turn_on_tv
  alias: "iOS Turn On TV"
  trigger:
    platform: event
    event_type: ios.action_fired
    event_data:
      actionName: turn_on_tv
  action:
    service: script.harmony_telewizja

# wyłącz TV
- id: ios_turn_off_tv
  alias: "iOS Turn Off TV"
  trigger:
    platform: event
    event_type: ios.action_fired
    event_data:
      actionName: turn_off_tv
  action:
    service: script.harmony_tv_off

## POWIADOMIENIA ##
# przekazanie persitant_notification na telefon
- id: notification_forward_persistant_notification_to_the_phone
  alias: "Notification Forward Persistant Notification To The Phone"
  trigger:
    platform: event
    event_type: "call_service"
    event_data:
      domain: "persistent_notification"
      service: "create"
  action:
    service: python_script.notify
    data:
      title: "{{ trigger.event.data.service_data.title }}"
      message: "{{ trigger.event.data.service_data.message }}"
      tag: "{{ trigger.event.data.service_data.notification_id }}"
      group: "persistan_notification"
      services:
        - service: !secret maciek_notify_service
          type: "android"

# usuwanie przekazanego persitant_notification na telefonie
- id: notification_dismiss_forwarded_persistant_notification_on_the_phone
  alias: "Notification Dismiss Forwarded Persistant Notification On The Phone"
  trigger:
    platform: event
    event_type: "call_service"
    event_data:
      domain: "persistent_notification"
      service: "dismiss"
  condition:
    condition: template
    value_template: "{{ trigger.event.data.service_data.notification_id != 'config_entry_discovery' }}"
  action:
    service: python_script.notify
    data:
      title: "clear_notification"
      message: "clear_notification"
      tag: "{{ trigger.event.data.service_data.notification_id }}"
      services:
        - service: !secret maciek_notify_service
          type: "android"

# usuwanie persitant_notification po usunięciu na telefonie
- id: notification_dismiss_persistant_notification_after_dismiss_on_the_phone
  alias: "Notification Dismiss Persistant Notification After Dimiss On The Phone"
  trigger:
    platform: event
    event_type: "mobile_app_notification_cleared"
    event_data:
      device_id: "9d5ca9a741416fa4"
  action:
    service: persistent_notification.dismiss
    data:
      notification_id: "{{ trigger.event.context.id }}"

# powiadomienie o aktualizacji HA
- id: notification_home_assistant_update_available
  alias: "Notification Home Assistant Update Available"
  trigger:
    platform: state
    entity_id: sensor.ha_version_current
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unknown' }}"
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unavailable' }}"
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unknown' }}"
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unavailable' }}"
    - condition: template
      value_template: "{{ trigger.from_state.state != trigger.to_state.state }}"
  action:
    - service: hassio.addon_start
      data:
        addon: core_check_config
    - delay:  "00:05:00"
    - service: python_script.notify
      data:
        title: "Aktualizacja Home Assistanta"
        message: "Dostępna jest aktualizacja do wersji {{ trigger.to_state.state }} dla Home Assistanta."
        tag: "notification-ha-update"
        group: "aktualizacje"
        url: "/hassio/dashboard"
        actions:
          - title: "Zmiany"
            action: "URI"
            uri: "https://github.com/home-assistant/home-assistant/releases"
          - title: "Konfiguracja"
            action: "URI"
            uri: "/hassio/addon/core_check_config/logs"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o aktualizacji Supervisora
- id: notification_supervisor_update_available
  alias: "Notification Supervisor Update Available"
  trigger:
    platform: state
    entity_id: sensor.supervisor_updates
    attribute: update_available
    to: true
  action:
    - service: python_script.notify
      data:
        title: "Aktualizacja Supervisora"
        message: "Dostępna jest aktualizacja do wersji {{ state_attr('sensor.supervisor_updates', 'newest_version') }} dla Supervisora."
        tag: "notification-supervisor-update"
        group: "aktualizacje"
        url: "/hassio/dashboard"
        services:
          - service: !secret maciek_notify_service
            type: "android"
            actions:
              - title: "Zmiany"
                action: "URI"
                uri: "https://github.com/home-assistant/supervisor/releases"

# powiadomienie o aktualizacji addonów
- id: notification_addons_update_available
  alias: "Notification Addons Update Available"
  trigger:
    platform: numeric_state
    entity_id: sensor.supervisor_updates
    above: 0
  action:
    - service: python_script.notify
      data:
        title: >-
          {% if (trigger.to_state.state | int) == 1 %}
            Aktualizacja dodatku Supervisora
          {% else %}
            Aktualizacje dodatków Supervisora
          {% endif %}
        message: >-
          {% if trigger.to_state.state | int == 1 %}
            {%- for repo in state_attr(trigger.entity_id, 'addons') %}
              Dostępna jest aktualizacja dodatku {{ repo.name }} do wersji {{ repo.version }}.
            {%- endfor %}
          {%- else %}
            Dostępne są aktualizacje dodatków:
            {%- for repo in state_attr(trigger.entity_id, 'addons') %}
          <br>- {{ repo.name }} do wersji {{ repo.version }}
            {%- endfor %}
          {%- endif %}
        tag: "notification-addons-update"
        group: "aktualizacje"
        url: "/hassio/dashboard"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o aktualizacji w HACS
- id: notification_update_available_in_hacs
  alias: "Notification Update Available In HACS"
  trigger:
    platform: state
    entity_id: sensor.hacs
  condition:
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unknown'}}"
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unavailable'}}"
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unknown'}}"
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unavailable'}}"
    - condition: template
      value_template: "{{ trigger.from_state.state | int < trigger.to_state.state | int }}"
  action:
    service: python_script.notify
    data:
      title: >-
        {% if (trigger.to_state.state | int) == 1 %}
          Aktualizacja dodatku z HACS
        {% else %}
          Aktualizacje dodatków z HACS
        {% endif %}
      message: >-
        {% if trigger.to_state.state | int == 1 %}
          {%- for repo in state_attr(trigger.entity_id, 'repositories') %}
            Dostępna jest aktualizacja dodatku {{ repo.display_name }} do wersji {{ repo.available_version }}.
          {%- endfor %}
        {%- else %}
          Dostępne są aktualizacje dodatków:
          {%- for repo in state_attr(trigger.entity_id, 'repositories') %}
         <br>- {{ repo.display_name }} do wersji {{ repo.available_version }}
          {%- endfor %}
        {%- endif %}
      tag: "notification-hacs"
      group: "aktualizacje"
      url: "/hacs/entry"
      services:
        - service: !secret maciek_notify_service
          type: "android"

# powiadomienie o wysokim użyciu pamięci RAM
- id: notification_high_ram_usage
  alias: "Notification High RAM Usage"
  trigger:
    platform: numeric_state
    entity_id: sensor.memory_use_percent
    above: 50
    for:
      minutes: 5
  action:
    service: python_script.notify
    data:
      title: "Wysokie użycie pamięci RAM"
      message: "Serwer Home Assistant używa obecnie {{ states('sensor.memory_use_percent') }}% pamięci RAM."
      tag: "notification-high-ram-usage"
      group: "inne"
      priority: "high"
      services:
        - service: !secret maciek_notify_service
          type: "android"

# powiadomienie o wygasającym certyfikacie SSL
- id: notification_ssl_cert_expiry
  alias: "Notification SSL Cert Expiry"
  trigger:
    platform: template
    value_template: "{{ states('sensor.ssl_certificate_expiry') | int < 11 }}"
  condition:
    - condition: not
      conditions:
        condition: state
        entity_id: sensor.ssl_certificate_expiry
        state: "unavailable"
  action:
    - service: python_script.notify
      data:
        title: "Wygasa certyfikat SSL"
        message: "Za {{ states('sensor.ssl_certificate_expiry') }} dni wygaśnie certyfikat SSL serwera WWW."
        tag: "notification-ssl"
        group: "inne"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o aktualizacji oprogramowania Shelly
- id: notification_shelly_update_available
  alias: "Notification Shelly Update Available"
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.shelly_1_328900_firmware_update
        - binary_sensor.shelly_1l_701559_firmware_update
        - binary_sensor.shelly_2_5b2604_firmware_update
        - binary_sensor.shelly_flood_f2ad1d_firmware_update
        - binary_sensor.shelly_ht_e00abd_firmware_update
        - binary_sensor.shelly_plug_s_7aecf4_firmware_update
      from: "off"
      to: "on"
  action:
    - service: python_script.notify
      data:
        title: "Aktualizacja oprogramowania Shelly"
        message: "Dostępna jest aktualizacja oprogramowania dla {{ trigger.to_state.attributes.friendly_name | replace(' Firmware Update', '') }}."
        tag: "notification-{{ trigger.entity_id }}"
        group: "aktualizacje"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o aktualizacji ESPHome
- id: notification_esphome_update_available
  alias: "Notification ESPHome Update Available"
  trigger:
    platform: state
    entity_id: sensor.esphome_version_current
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unknown' }}"
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unavailable' }}"
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unknown' }}"
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unavailable' }}"
  action:
    - service: python_script.notify
      data:
        title: "Aktualizacja ESPHome"
        message: "Dostępna jest aktualizacja do wersji {{ trigger.to_state.state }} dla ESPHome."
        tag: "notification-esphome-update"
        group: "aktualizacje"
        url: "/hassio/dashboard"
        services:
          - service: !secret maciek_notify_service
            type: "android"
            actions:
              - title: "Zmiany"
                action: "URI"
                uri: "https://github.com/esphome/esphome/releases"

# powiadomienie o aktualizacji Caddy
- id: notification_caddy_update_available
  alias: "Notification Caddy Update Available"
  trigger:
    platform: state
    entity_id: sensor.caddy_version_current
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unknown' }}"
    - condition: template
      value_template: "{{ trigger.to_state.state != 'unavailable' }}"
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unknown' }}"
    - condition: template
      value_template: "{{ trigger.from_state.state != 'unavailable' }}"
  action:
    - service: python_script.notify
      data:
        title: "Aktualizacja Caddy"
        message: "Dostępna jest aktualizacja do wersji {{ trigger.to_state.state }} dla Caddy."
        tag: "notification-caddy-update"
        group: "aktualizacje"
        services:
          - service: !secret maciek_notify_service
            type: "android"
            actions:
              - title: "Zmiany"
                action: "URI"
                uri: "https://github.com/caddyserver/caddy/releases"

###################################################################################################

# włączenie drzewek jak jest zachód słońca i domownicy w domu
- id: light_turn_on_trees
  alias: "Light Turn On Trees"
  trigger:
    platform: sun
    event: sunset
  condition:
    condition: state
    entity_id: binary_sensor.people_at_home
    state: "on"
  action:
    - service: switch.turn_on
      entity_id:
        - switch.tree_sypialnia
        - switch.tree_antek

# wyłączenie drzewek o 23
- id: light_turn_off_trees
  alias: "Light Turn Off Trees"
  trigger:
    platform: time
    at: "23:00:00"
  action:
    service: switch.turn_off
    entity_id:
      - switch.tree_sypialnia
      - switch.tree_antek

# włączenie drzewek jak po zachodzie słońca wracają domownicy
- id: light_turn_on_trees_when_peoples_back
  alias: "Light Turn On Trees When Peoples Back"
  trigger:
    platform: state
    entity_id: binary_sensor.people_at_home
    to: "on"
  condition:
    - condition: sun
      after: sunset
    - condition: time
      before: "23:00:00"
  action:
    service: switch.turn_on
    entity_id:
      - switch.tree_sypialnia
      - switch.tree_antek

# powiadomienie o zbliżającej się burzy
- id: notification_storm_comming
  alias: "Notification Storm Comming"
  trigger:
    platform: numeric_state
    entity_id: sensor.lightning_distance
    below: 10
  variables:
    notification_title: "Burza w pobliżu domu"
    notification_message: "Wyładowania atmosferyczne występują {{ states('sensor.lightning_distance') }} km od domu."
    notification_tag: "notification-storm-comming"
  action:
    - choose:
        conditions:
          condition: state
          entity_id: person.maciek
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            tag: "{{ notification_tag }}"
            services:
              - service: !secret maciek_notify_service
                type: "android"
    - choose:
        conditions:
          condition: state
          entity_id: person.edyta
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            tag: "{{ notification_tag }}"
            services:
              - service: !secret edyta_notify_service
                type: "ios"
    - choose:
        conditions:
          condition: state
          entity_id: media_player.bravia_salon
          state: "on"
        sequence:
          service: notify.bravia
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - choose:
        conditions:
          condition: state
          entity_id: media_player.mibox_goscinny
          state: "on"
        sequence:
          service: notify.mibox
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - delay: "00:15:00"

# powiadomienie o końcu zmywania
- id: notification_dishwasher_end
  alias: "Notification Dishwasher End"
  trigger:
    platform: state
    entity_id: sensor.dishwasher_kuchnia
    from: "zmywanie"
    to: "wyłączona"
    for:
      minutes: 1
  action:
    service: python_script.notify
    data:
      title: "Koniec zmywania"
      message: "Zmywarka zakończyła zmywanie naczyń."
      tag: "notification-dishwasher"
      group: "inne"
      services:
        - service: !secret maciek_notify_service
          type: "android"
        - service: !secret edyta_notify_service
          type: "ios"

# powiadomienie o włączonym komputerze
- id: notification_desktop_computer_turned_on
  alias: "Notification Desktop Computer Turned On"
  trigger:
    - platform: time
      at: "22:45:00"
    - platform: state
      entity_id: person.maciek
      to: not_home
      for:
        minutes: 5
  condition:
    condition: state
    entity_id: switch.stacjonarny
    state: "on"
  action:
    service: python_script.notify
    data:
      title: "Komputer stacjonarny włączony"
      message: "Komputer stacjonarny jest włączony. Czy chcesz go wyłączyć?"
      tag: "notification-desktop-computer"
      group: "inne"
      actions:
        - title: "Wyłącz"
          action: "TURN_OFF_DESKTOP_COMPUTER"
      services:
        - service: !secret maciek_notify_service
          type: "android"

# wyłączenie komputera z powiadomienia
- id: notification_turn_off_desktop_computer
  alias: "Notification Turn Off Desktop Computer"
  trigger:
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: "TURN_OFF_DESKTOP_COMPUTER"
  action:
    - service: switch.turn_off
      entity_id: switch.stacjonarny
    - service: python_script.notify
      data:
        title: "{{ trigger.event.data.title }}"
        message: "clear_notification"
        tag: "{{ trigger.event.data.tag }}"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o encji ze stanem dead lub unavailable
- id: notification_dead_or_unavailable
  alias: "Notification dead or unavailable"
  trigger:
    platform: time_pattern
    minutes: "/10"
    seconds: 0
  condition:
    condition: template
    value_template: >
      {% macro dead_unavailable_entities() %}
        {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'fan', 'binary_sensor', 'media_player'] -%}
        {%- set rooms = ['przedpokoj', 'goscinny', 'pracownia', 'kuchnia', 'salon', 'schody', 'antresola', 'gabinet', 'pralnia', 'antek', 'sypialnia', 'lazienka', 'balkon', 'indoor', 'outdoor'] -%}
        {%- set ignored = ['media_player.dune_salon', 'media_player.mibox_goscinny'] -%}
        {% for domain in domains -%}
          {% for item in states[domain] if (item.entity_id.split('.')[-1].split('_')[-1] in rooms or item.entity_id.split('.')[-1].split('_')[-2] in rooms) and not (item.entity_id in ignored or 'battery' in item.entity_id or 'status' in item.entity_id) and item.state is defined and (item.state == 'dead' or item.state == 'unavailable') %}
            {{ item.name }} ({{ item.entity_id }})
          {%- endfor %}
        {%- endfor %}
      {% endmacro %}
      {{ dead_unavailable_entities()  | trim != '' }}
  action:
    - service: python_script.notify
      data:
        title: "Encja z nieprawidłowym stanem"
        message: >
          {% macro dead_unavailable_entities() %}
            {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'fan', 'binary_sensor', 'media_player'] -%}
            {%- set rooms = ['przedpokoj', 'goscinny', 'pracownia', 'kuchnia', 'salon', 'schody', 'antresola', 'gabinet', 'pralnia', 'antek', 'sypialnia', 'lazienka', 'balkon', 'indoor', 'outdoor'] -%}
            {%- set ignored = ['media_player.dune_salon', 'media_player.mibox_goscinny'] -%}
            {% for domain in domains -%}
              {% for item in states[domain] if (item.entity_id.split('.')[-1].split('_')[-1] in rooms or item.entity_id.split('.')[-1].split('_')[-2] in rooms) and not (item.entity_id in ignored or 'battery' in item.entity_id or 'status' in item.entity_id) and item.state is defined and (item.state == 'dead' or item.state == 'unavailable') %}
           <br>- {{ item.name }} ({{ item.entity_id }})
              {%- endfor %}
            {%- endfor %}
          {% endmacro %}
          Następujące encje mają nieprawidłowe stany: {{ dead_unavailable_entities() }}
        tag: "notification-dead-unavailable"
        group: "inne"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o małej ilości wody w nawilżaczu
- id: notification_humidifier_low_water
  alias: "Notification Humidifier Low Water"
  trigger:
    - platform: numeric_state
      entity_id: sensor.humidifier_water_level
      below: 10
    - platform: numeric_state
      entity_id: sensor.humidifier_water_level
      below: 20
    - platform: numeric_state
      entity_id: sensor.humidifier_water_level
      below: 40
  condition:
    condition: and
    conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: person.maciek
            state: "home"
          - condition: state
            entity_id: person.edyta
            state: "home"
      - condition: state
        entity_id: input_boolean.heating_season
        state: "on"
      - condition: template
        value_template: "{{ states('sensor.humidifier_water_level') | int != 0 }}"
  variables:
    notification_title: "Uzupełnij wodę w nawilżaczu"
    notification_message: "W zbiorniku nawilżacza pozostało {{ states('sensor.humidifier_water_level') }}% wody."
    notification_tag: "notification-humidifier"
  action:
    - choose:
        conditions:
          condition: state
          entity_id: person.maciek
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            tag: "{{ notification_tag }}"
            services:
              - service: !secret maciek_notify_service
                type: "android"
    - choose:
        conditions:
          condition: state
          entity_id: person.edyta
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            tag: "{{ notification_tag }}"
            services:
              - service: !secret edyta_notify_service
                type: "ios"
    - choose:
        conditions:
          condition: state
          entity_id: media_player.bravia_salon
          state: "on"
        sequence:
          service: notify.bravia
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - choose:
        conditions:
          condition: state
          entity_id: media_player.mibox_goscinny
          state: "on"
        sequence:
          service: notify.mibox
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10

# powiadomienie o wysokim stężeniu CO2 w salonie
- id: notification_salon_co2
  alias: "Notification Salon CO2"
  trigger:
    platform: numeric_state
    entity_id: sensor.co2_salon
    above: 1000
    for:
      minutes: 5
  condition:
    condition: and
    conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: person.maciek
            state: "home"
          - condition: state
            entity_id: person.edyta
            state: "home"
      - condition: state
        entity_id: input_boolean.away_mode
        state: "off"
  variables:
    notification_title: "Wysokie stężenie dwutlenku węgla"
    notification_message: "W salonie stężenie dwutlenku węgla wynosi {{ trigger.to_state.state }} ppm. Należy przewietrzyć pomieszczenie."
    notification_tag: "notification-high-co2"
  action:
    - choose:
        conditions:
          condition: state
          entity_id: person.maciek
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            tag: "{{ notification_tag }}"
            services:
              - service: !secret maciek_notify_service
                type: "android"
    - choose:
        conditions:
          condition: state
          entity_id: person.edyta
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            tag: "{{ notification_tag }}"
            services:
              - service: !secret edyta_notify_service
                type: "ios"
    - choose:
        conditions:
          condition: state
          entity_id: media_player.bravia_salon
          state: "on"
        sequence:
          service: notify.bravia
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - choose:
        conditions:
          condition: state
          entity_id: media_player.mibox_goscinny
          state: "on"
        sequence:
          service: notify.mibox
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10


# powiadomienie jak pojawi się woda na podłodze w kuchni
- id: notification_water_leak_kuchnia
  alias: "Notification Water Leak Kuchnia"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.water_leak_kuchnia
      from: "off"
      to: "on"
  variables:
    notification_title: "Wykryto wyciek wody"
    notification_message: "W kuchni wykryto wodę na podłodze."
  action:
    - service: python_script.notify
      data:
        title: "{{ notification_title }}"
        message: "{{ notification_message }}"
        tag: "notification-water-leak"
        priority: "high"
        services:
          - service: !secret maciek_notify_service
            type: "android"
          - service: !secret edyta_notify_service
            type: "ios"
    - choose:
        conditions:
          condition: state
          entity_id: media_player.bravia_salon
          state: "on"
        sequence:
          service: notify.bravia
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - choose:
        conditions:
          condition: state
          entity_id: media_player.mibox_goscinny
          state: "on"
        sequence:
          service: notify.mibox
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10

# powiadomienie jak zbyt duże obciążenie przekaźnika
- id: notification_relay_overpower
  alias: "Notification Relay Overpower"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.shelly_plug_s_7aecf4_overpower_0
        - binary_sensor.shelly_2_5b2604_overpower_0
        - binary_sensor.shelly_2_5b2604_overpower_1
      from: "off"
      to: "on"
      for:
        minutes: 1
  variables:
    notification_title: "Zbyt duże obciążenie przekaźnika"
    notification_message: "Przekaźnik {{ state_attr(trigger.to_state.attributes.relay, 'friendly_name') }} ma zbyt duże obciążenie i został wyłączony."
  action:
    - service: python_script.notify
      data:
        title: "{{ notification_title }}"
        message: "{{ notification_message }}"
        tag: "notification-relay-overpower-{{ trigger.entity_id }}"
        priority: "high"
        services:
          - service: !secret maciek_notify_service
            type: "android"
          - service: !secret edyta_notify_service
            type: "ios"
    - choose:
        conditions:
          condition: state
          entity_id: media_player.bravia_salon
          state: "on"
        sequence:
          service: notify.bravia
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - choose:
        conditions:
          condition: state
          entity_id: media_player.mibox_goscinny
          state: "on"
        sequence:
          service: notify.mibox
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10

# powiadomienie urządzenei się przegrzewa
- id: notification_relay_overheating
  alias: "Notification Relay Overheating"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.shelly_1l_701559_overtemperature
        - binary_sensor.shelly_plug_s_7aecf4_overtemperature
      from: "off"
      to: "on"
      for:
        minutes: 1
  variables:
    notification_title: "Przekaźniek się przegrzewa"
    notification_message: "Przekaźnik {{ state_attr(trigger.to_state.attributes.relay, 'friendly_name') }} się przegrzewa."
  action:
    - service: python_script.notify
      data:
        title: "{{ notification_title }}"
        message: "{{ notification_message }}"
        tag: "notification-relay-overheating-{{ trigger.entity_id }}"
        priority: "high"
        services:
          - service: !secret maciek_notify_service
            type: "android"
          - service: !secret edyta_notify_service
            type: "ios"
    - choose:
        conditions:
          condition: state
          entity_id: media_player.bravia_salon
          state: "on"
        sequence:
          service: notify.bravia
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - choose:
        conditions:
          condition: state
          entity_id: media_player.mibox_goscinny
          state: "on"
        sequence:
          service: notify.mibox
          data:
            title: "{{ notification_title }}"
            message: "{{ notification_message }}"
            data:
              file:
                url: !secret favicon_url
              duration: 10

# powiadomienie jak jest ruch i nikogo w domu
- id: notification_motion_when_away_mode
  alias: "Notification Motion When Away Mode"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.motion_antresola
        - binary_sensor.motion_salon
        - binary_sensor.motion_sypialnia
        - binary_sensor.motion_antek
        - binary_sensor.motion_przedpokoj
        - binary_sensor.motion_pracownia
        - binary_sensor.motion_goscinny
        - binary_sensor.motion_gabinet
      from: "off"
      to: "on"
  condition:
    condition: state
    entity_id: input_boolean.away_mode
    state: "on"
    for:
      minutes: 10
  action:
    service: script.notify_motion
    data:
      title: "Wykryto ruch w pustym mieszkaniu"
      message: "Pomieszczenie: {{ trigger.to_state.attributes.location }}, godzina {{ now().strftime('%H:%M') }}."
      tag: "notification-motion-{{ trigger.to_state.attributes.location }}"
      datetime: "{{ now().strftime('%Y%m%d%H%M%S') }}"
      location: "{{ trigger.to_state.attributes.location }}"

# powiadomienie jak otworzy się okno i nikogo w domu
- id: notification_window_opened_when_away_mode
  alias: "Notification Window Opened When Away Mode"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.balcony_door_sypialnia
        - binary_sensor.window_sypialnia
        - binary_sensor.window_kuchnia
        - binary_sensor.balcony_door_pracownia
        - binary_sensor.window_antresola
        - binary_sensor.window_antek
        - binary_sensor.window_sypialnia
      from: "off"
      to: "on"
  condition:
    condition: state
    entity_id: input_boolean.away_mode
    state: "on"
    for:
      minutes: 10
  action:
    service: python_script.notify
    data:
      title: "Wykryto otwarcie okna w pustym mieszkaniu"
      message: "Pomieszczenie: {{ trigger.to_state.attributes.location }}, godzina {{ now().strftime('%H:%M') }}."
      tag: "notification-window-opened-{{ trigger.to_state.attributes.location }}"
      group: "okna"
      priority: "high"
      services:
        - service: !secret maciek_notify_service
          type: "android"
        - service: !secret edyta_notify_service
          type: "ios"

# powiadomienie o otwartych drzwiach balkonowych w pracowni po wyjściu z domu
- id: notification_balcony_door_pracownia_opened
  alias: "Notification Balcony Door Pracownia Opened"
  trigger:
    platform: state
    entity_id: binary_sensor.people_at_home
    to: "off"
  condition:
    condition: state
    entity_id: binary_sensor.balcony_door_pracownia
    state: "on"
  action:
    service: python_script.notify
    data:
      title: "Otwarte drzwi balkonowe"
      message: "Domownicy opuścili mieszkanie, a drzwi balkonowe w pracowni nie są zamknięte."
      tag: "notification-balcony-door-pracownia"
      priority: "high"
      group: "okna"
      services:
        - service: !secret maciek_notify_service
          type: "android"
        - service: !secret edyta_notify_service
          type: "ios"

# powiadomienia o małej ilości miejsca na Synology
- id: notification_low_disk_space_on_synology
  alias: "Notification Low Disk Space On Synology"
  trigger:
    platform: numeric_state
    entity_id: sensor.synology_disk_used
    above: 70
  action:
    - service: python_script.notify
      data:
        title: "Mało miejsca na dysku Synology"
        message: "Dysk Synology jest zapełniony w {{ trigger.to_state.state }}%."
        tag: "notification-synology-low-space"
        group: "inne"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o wykryciu nowego urządzenia
- id: notification_new_device
  alias: "Notification New Device"
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
    - service: python_script.notify
      data:
        title: "Nowe urządzenie"
        message: "Wykryto nowe urządzenie o nazwie {{trigger.event.data.host_name}} ({{trigger.event.data.entity_id}})."
        tag: "notification-new-device"
        group: "inne"
        services:
          - service: !secret maciek_notify_service
            type: "android"

# powiadomienie o niskim poziomie naładowania baterii
- id: notification_low_battery
  alias: "Notification Low Battery"
  trigger:
    platform: time
    at: "18:00:00"
  condition:
    condition: template
    value_template: >
      {% macro battery_level() %}
        {%- set threshold = 10 -%}
        {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock', 'binary_sensor'] -%}
        {% for domain in domains -%}
          {% for item in states[domain] if (((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ('battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown')))) and not (( 'humidity' in item.entity_id) or ('illumination' in item.entity_id)) -%}
            {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) %}
              {{ item.entity_id }} [{{ item.attributes['battery_level'] | round(0) }}%]{% endif -%}
            {% if 'battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown') %}
              {{ item.entity_id }} [{{ item.state | round(0) }}%]{% endif -%}
          {% endfor %}
        {%- endfor %}
      {% endmacro %}
      {{ battery_level() | trim != '' }}
  action:
    - service: python_script.notify
      data:
        title: "Niski poziom naładowania baterii"
        message: >
          {% macro battery_level() %}
            {%- set threshold = 10 -%}
            {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock', 'binary_sensor'] -%}
            {% for domain in domains -%}
              {% for item in states[domain] if (((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ('battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown')))) and not (( 'humidity' in item.entity_id) or ('illumination' in item.entity_id)) -%}
                {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) %}
           <br>- {{ item.entity_id }} [{{ item.attributes['battery_level'] | round(0) }}%]{% endif -%}
                {% if 'battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown') %}
           <br>- {{ item.entity_id }} [{{ item.state | round(0) }}%]{% endif -%}
              {% endfor %}
            {%- endfor %}
          {% endmacro %}
          W następujących urządzeniach jest niski poziom naładowania baterii: {{ battery_level() }}
        tag: "notification-low-battery"
        group: "inne"
        services:
          - service: !secret maciek_notify_service
            type: "android"

##################################################################################################

#### OBECNOŚĆ ####################################################################################
# Edyta daleko od domu
- id: presence_edyta_far_from_home
  alias: "Presence Edyta Far From Home"
  trigger:
    platform: state
    entity_id: person.edyta
  condition:
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'latitude') != None }}"
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'longitude') != None }}"
    - condition: state
      entity_id: input_boolean.edyta_far_from_home
      state: "off"
    - condition: template
      value_template: "{{ distance(trigger.entity_id, 'zone.home') > 40 }}"
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.edyta_far_from_home

# Maciek daleko od domu
- id: presence_maciek_far_from_home
  alias: "Presence Maciek Far From Home"
  trigger:
    platform: state
    entity_id: person.maciek
  condition:
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'latitude') != None }}"
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'longitude') != None }}"
    - condition: state
      entity_id: input_boolean.maciek_far_from_home
      state: "off"
    - condition: template
      value_template: "{{ distance(trigger.entity_id, 'zone.home') > 40 }}"
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.maciek_far_from_home

# Maciek blisko domu
- id: presence_maciek_near_home
  alias: "Presence Maciek Near Home"
  trigger:
    platform: state
    entity_id: person.maciek
  condition:
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'latitude') != None }}"
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'longitude') != None }}"
    - condition: state
      entity_id: input_boolean.maciek_far_from_home
      state: "on"
    - condition: template
      value_template: "{{ distance(trigger.entity_id, 'zone.home') < 30 }}"
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.maciek_far_from_home

# Edyta wróciła do domu po dalekiej podróży
- id: presence_edyta_near_home
  alias: "Presence Edyta Near Home"
  trigger:
    platform: state
    entity_id: person.edyta
  condition:
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'latitude') != None }}"
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'longitude') != None }}"
    - condition: state
      entity_id: input_boolean.edyta_far_from_home
      state: "on"
    - condition: template
      value_template: "{{ distance(trigger.entity_id, 'zone.home') < 30 }}"
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.edyta_far_from_home

# ludzie poza domem
- id: presence_peoples_away
  alias: "Presence Peoples Away"
  trigger:
    platform: state
    entity_id: binary_sensor.people_at_home
    to: "off"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.away_mode
    - condition: state
      entity_id: group.windows
      state: "on"
    - condition: numeric_state
      entity_id: sensor.dark_sky_precip_probability
      above: 20
    - service: python_script.notify
      data:
        title: "Otwarte okna"
        message: "Okna w pustym mieszkaniu nie są zamknięte, a prawdopodobieństwo opadów wynosi {{ states('sensor.dark_sky_precip_probability') }}%."
        tag: "notification-windows-weather"
        group: "okna"
        priority: "high"
        services:
          - service: !secret maciek_notify_service
            type: "android"
          - service: !secret edyta_notify_service
            type: "ios"

# ludzie w domu
- id: presence_peoples_back
  alias: "Presence Peoples Back"
  trigger:
    platform: state
    entity_id: binary_sensor.people_at_home
    to: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.away_mode
    # - condition: and
    #   conditions:
    #     - condition: state
    #       entity_id: input_boolean.heating_season
    #       state: "off"
    #     - condition: numeric_state
    #       entity_id: sensor.temperature_salon
    #       above: 26
    # - service: fan.turn_on
    #   entity_id: fan.pedestal_salon

##################################################################################################

#### HEATING #####################################################################################
# zwiększenie temperatury rano jeśli ktoś jest w domu i trwa sezon grzewczy
- id: heating_day
  alias: "Heating Day"
  trigger:
    platform: time
    at:
      - input_datetime.heating_night_end
      - input_datetime.heating_night_end_weekend
  condition:
    - condition: or
      conditions:
        - condition: template
          value_template: "{{ 'input_datetime.heating_night_end' in trigger.description and is_state('binary_sensor.workday_sensor', 'on') }}"
        - condition: template
          value_template: "{{ 'input_datetime.heating_night_end_weekend' in trigger.description and is_state('binary_sensor.workday_sensor', 'off') }}"
    - condition: state
      entity_id: input_boolean.heating_season
      state: "on"
    - condition: state
      entity_id:
        - input_boolean.away_mode
        - group.windows
      state: "off"
  action:
    service: script.heating_day

# zmniejszenie temperatury na noc jeśli trwa sezon grzewczy
- id: heating_night
  alias: "Heating Night"
  trigger:
    platform: time
    at:
      - input_datetime.heating_night_start
      - input_datetime.heating_night_start_weekend
  condition:
    - condition: or
      conditions:
        - condition: template
          value_template: "{{ 'input_datetime.heating_night_start' in trigger.description and is_state('binary_sensor.workday_sensor', 'on') }}"
        - condition: template
          value_template: "{{ 'input_datetime.heating_night_start_weekend' in trigger.description and is_state('binary_sensor.workday_sensor', 'off') }}"
    - condition: state
      entity_id: input_boolean.heating_season
      state: "on"
    - condition: state
      entity_id:
        - input_boolean.away_mode
        - group.windows
      state: "off"
  action:
    service: script.heating_night

# zmniejszenie temperatury na noc w salonie i kuchni po wyłączeniu TV
- id: heating_night_salon_and_kuchnia
  alias: "Heating Night Salon and Kuchnia"
  trigger:
    platform: state
    entity_id: media_player.denon_salon
    to: "off"
  condition:
    - condition: state
      entity_id:
        - input_boolean.heating_season
        - input_boolean.heating_night
      state: "on"
    - condition: state
      entity_id:
        - input_boolean.heating_salon_kuchnia_night
        - group.windows
      state: "off"
  action:
    - service: fan.turn_off
      entity_id: fan.humidifier_salon
    - condition: state
      entity_id: input_boolean.guests
      state: "off"
    - service: climate.set_temperature
      entity_id:
        - climate.aeotec_thermostat_kuchnia
        - climate.thermostat_salon
      data:
        temperature: "{{ states('input_select.heating_temp_night') }}"
    - service: input_boolean.turn_on
      entity_id: input_boolean.heating_salon_kuchnia_night

# wyłączenie wentylatora po wyłączeniu telewizora
# - id: climate_turn_off_fan
#   alias: "Climate Turn Off Fan"
#   trigger:
#     platform: state
#     entity_id: media_player.denon_salon
#     to: "off"
#   condition:
#     - condition: state
#       entity_id: fan.pedestal_salon
#       state: "on"
#     - condition: state
#       entity_id: input_boolean.heating_season
#       state: "off"
#     - condition: time
#       after: "22:00:00"
#   action:
#     service: fan.turn_off
#     entity_id: fan.pedestal_salon

# zmniejszenie temperatury gdy domownicy wychodzą i jest sezon grzewczy
- id: heating_eco_mode
  alias: "Heating Eco Mode"
  trigger:
    platform: state
    entity_id: input_boolean.away_mode
    from: "off"
    to: "on"
    for:
      minutes: 15
  condition:
    - condition: state
      entity_id: input_boolean.heating_season
      state: "on"
    - condition: state
      entity_id: group.windows
      state: "off"
  action:
    service: script.heating_eco_mode

# zwiększenie temperatury gdy domownicy wracają i jest sezon grzewczy
- id: heating_peoples_back
  alias: "Heating Peoples Back"
  trigger:
    platform: state
    entity_id: input_boolean.away_mode
    from: "on"
    to: "off"
  condition:
    - condition: state
      entity_id: input_boolean.heating_season
      state: "on"
    - condition: state
      entity_id: group.windows
      state: "off"
  action:
    choose:
      conditions:
        condition: time
        after: "05:00:00"
        before: "22:00:00"
      sequence:
        service: script.heating_day
    default:
      service: script.heating_night

# włączenie ogrzewania 30 minut przed powrotem do domu w dzień gdy jest sezon grzewczy
- id: heating_turn_on_before_return_to_home
  alias: "Heating Turn On Before Return To Home"
  trigger:
    - platform: state
      entity_id: input_boolean.edyta_far_from_home
      from: "on"
      to: "off"
    - platform: state
      entity_id: input_boolean.maciek_far_from_home
      from: "on"
      to: "off"
  condition:
    - condition: state
      entity_id:
        - input_boolean.heating_season
        - input_boolean.away_mode
      state: "on"
    - condition: state
      entity_id:
        - script.heating_fast_warm_up
        - group.windows
      state: "off"
  action:
    service: script.heating_day

# włączenie szybkiego dogrzewania 60 minut przed powrotem do domu w dzień gdy jest sezon grzewczy gdy nieobecność domowników dłuższa niż 10 godzin
- id: heating_heating_fast_warm_up_before_return_to_home
  alias: "Heating Fast Warm Up Before Return To Home"
  trigger:
    platform: state
    entity_id:
      - person.edyta
      - person.maciek
  condition:
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'latitude') != None }}"
    - condition: template
      value_template: "{{ state_attr(trigger.entity_id, 'longitude') != None }}"
    - condition: state
      entity_id:
        - input_boolean.edyta_far_from_home
        - input_boolean.maciek_far_from_home
        - input_boolean.heating_season
      state: "on"
    - condition: state
      entity_id: input_boolean.away_mode
      state: "on"
      for:
        hours: 10
    - condition: state
      entity_id:
        - script.heating_fast_warm_up
        - group.windows
      state: "off"
  action:
    - condition: template
      value_template: "{{ distance(trigger.entity_id, 'zone.home') < 60 }}"
    - service: script.heating_fast_warm_up
    - service: input_boolean.turn_off
      entity_id:
        - input_boolean.edyta_far_from_home
        - input_boolean.maciek_far_from_home
    - service: python_script.notify
      data:
        title: "Włączono szybkie dogrzanie"
        message: "Włączono szybie dogrzanie pomieszczeń po długiej nieobecności domowników."
        tag: "notification-fast-warm-up"
        group: "ogrzewanie"
        services:
          - service: !secret maciek_notify_service
            type: "android"
          - service: !secret edyta_notify_service
            type: "ios"
    - condition: template
      value_template: >-
        {{ states('sensor.humidity_salon') | float < states('input_select.target_humidity') | float
           and states('sensor.humidifier_water_level') | int > 5 }}
    - service: fan.turn_on
      entity_id: fan.humidifier_salon

# otwarcie okien uruchamia przewietrzanie
- id: windows_opened_for_airing
  alias: "Windows Opened For Airing"
  trigger:
    platform: state
    entity_id: group.windows
    from: "off"
    to: "on"
    for:
      minutes: 10
  condition:
    condition: state
    entity_id: input_boolean.heating_season
    state: "on"
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.heating_airing

# zamknięcie okien kończy przewietrzanie
- id: windows_closed
  alias: "Windows Closed"
  trigger:
    platform: state
    entity_id: group.windows
    from: "on"
    to: "off"
    for:
      minutes: 5
  condition:
    condition: state
    entity_id: input_boolean.heating_season
    state: "on"
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.heating_airing

# początek przewietrzania
- id: heating_airing_begin
  alias: "Heating Airing Begin"
  trigger:
    platform: state
    entity_id: input_boolean.heating_airing
    from: "off"
    to: "on"
  condition:
    condition: state
    entity_id: input_boolean.heating_season
    state: "on"
  action:
    service: script.heating_airing_begin

# koniec przewietrzania
- id: heating_airing_end
  alias: "Heating Airing End"
  trigger:
    platform: state
    entity_id: input_boolean.heating_airing
    from: "on"
    to: "off"
  condition:
    - condition: state
      entity_id: input_boolean.heating_season
      state: "on"
  action:
    - choose:
        conditions:
          condition: time
          after: "05:00:00"
          before: "22:00:00"
        sequence:
          service: script.heating_day
      default:
        service: script.heating_night
    - condition: state
      entity_id: group.windows
      state: "on"
    - service: python_script.notify
      data:
        title: "Koniec przewietrzania"
        message: "Wyłączono tryb przewietrzania. Proszę zamknąć okna!"
        tag: "notification-airing-end"
        group: "ogrzewanie"
        priority: "high"
        services:
          - service: !secret maciek_notify_service
            type: "android"
          - service: !secret edyta_notify_service
            type: "ios"

# początek sezonu grzewczego
- id: heating_season_begin
  alias: "Heating Season Begin"
  trigger:
    platform: state
    entity_id: input_boolean.heating_season
    from: "off"
    to: "on"
  action:
    - service: climate.turn_on
      entity_id:
        - climate.aeotec_thermostat_kuchnia
        - climate.custom_thermostat_lazienka
    - service: script.heating_day

# koniec sezonu grzewczego
- id: heating_season_end
  alias: "Heating Season End"
  trigger:
    platform: state
    entity_id: input_boolean.heating_season
    from: "on"
    to: "off"
  action:
    service: script.heating_season_end

##################################################################################################

#### LIGHT #######################################################################################
# włączenie flux przy starcie HA
- id: light_turn_on_flux_at_start
  alias: "Light Turn On Flux At Start"
  trigger:
    platform: homeassistant
    event: start
  condition:
    condition: state
    entity_id: input_select.light_scenes_salon
    state: "automatyczny"
  action:
    service: switch.turn_on
    entity_id: switch.flux

# wyłączenie oświetlenia po wyjściu z domu
- id: light_turn_off_when_away_mode
  alias: "Light Turn Off When Away Mode"
  trigger:
    platform: state
    entity_id: input_boolean.away_mode
    from: "off"
    to: "on"
  action:
    service: script.devices_away_mode

## SALON ##
# restart żarówek w salonie gdy niedostępne
- id: light_restart_bulbs_salon_when_unavailable
  alias: "Light Restart Bulbs Salon When Unavailable"
  trigger:
    - platform: state
      entity_id: light.bulb_salon_1
      to: "unavailable"
      for:
        minutes: 2
    - platform: state
      entity_id: light.bulb_salon_2
      to: "unavailable"
      for:
        minutes: 2
  action:
    - service: switch.turn_off
      entity_id: switch.bulbs_salon
    - delay: "00:00:05"
    - service: switch.turn_on
      entity_id: switch.bulbs_salon
    - condition: template
      value_template: "{{ trigger.from_state.state == 'off' }}"
    - wait_template: "{{ is_state('light.bulb_salon_1', 'on') and is_state('light.bulb_salon_2', 'on') }}"
    - service: light.turn_off
      entity_id: light.bulbs_salon

# restart lampy w salonie gdy niedostępna
- id: light_restart_lamp_salon_when_unavailable
  alias: "Light Restart Lamp Salon When Unavailable"
  trigger:
    platform: state
    entity_id: light.lamp_salon
    to: "unavailable"
    for:
      minutes: 2
  action:
    - service: switch.turn_off
      entity_id: switch.lamp_salon
    - delay: "00:00:05"
    - service: switch.turn_on
      entity_id: switch.lamp_salon
    - condition: template
      value_template: "{{ trigger.from_state.state == 'off' }}"
    - wait_template: "{{ is_state('light.lamp_salon', 'on') }}"
    - service: light.turn_off
      entity_id: light.lamp_salon

# wyłączenie urządzeń w salonie jeśli nie ma ruchu przez godzinę i jest po północy
- id: devices_turn_off_in_salon_when_no_motion_and_after_midnight
  alias: "Devices Turn Off In Salon When No Motion And After Midnight"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_salon
    to: "off"
    for:
      minutes: 30
  condition:
    condition: and
    conditions:
      - condition: time
        after: "00:30:00"
        before: "06:00:00"
      - condition: state
        entity_id: media_player.denon_salon
        state: "off"
      - condition: or
        conditions:
          - condition: state
            entity_id: light.bulbs_salon
            state: "on"
          - condition: state
            entity_id: light.leds_salon
            state: "on"
          - condition: state
            entity_id: light.lamp_salon
            state: "on"
          # - condition: state
          #   entity_id: fan.pedestal_salon
          #   state: "on"
  action:
    service: homeassistant.turn_off
    entity_id:
      - light.bulbs_salon
      - light.leds_salon
      - light.lamp_salon
      # - fan.pedestal_salon

# automatyczna scena oświetlenia w salonie
- id: light_scene_salon_auto_when_bulbs_turn_on
  alias: "Light Scene Salon Auto When Bulbs Turn On"
  trigger:
    platform: state
    entity_id: light.bulbs_salon
    to: "on"
  action:
    service: input_select.select_option
    data:
      entity_id: input_select.light_scenes_salon
      option: "automatyczny"

# wybór sceny oświetlenia w salonie gdy zarówki włączone
- id: light_scene_salon
  alias: "Light Scene Salon"
  trigger:
    platform: state
    entity_id: input_select.light_scenes_salon
  action:
    service: scene.turn_on
    data:
      entity_id: scene.{{ trigger.to_state.state }}
      transition: 5

# włączenie/wyłączenie lampy w salonie
- id: light_toggle_power_salon_lamp
  alias: "Light Toggle Power Salon Lamp"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_1
        click_type: single
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_2
        click_type: single
  action:
    service: light.toggle
    entity_id: light.lamp_salon

# włączenie/wyłączenie żarówek w salonie
- id: light_toggle_power_salon_bulbs
  alias: "Light Toggle Power Salon Bulbs"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_1
        click_type: double
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_2
        click_type: double
    - platform: state
      entity_id: binary_sensor.switch_bulbs_salon
      from: "off"
      to: "on"
  action:
    service: light.toggle
    entity_id: light.bulbs_salon

# włączenie/wyłączenie LEDów w salonie
- id: light_toggle_power_salon_leds
  alias: "Light Toggle Power Salon LEDs"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_1
        click_type: hold
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_2
        click_type: hold
  action:
    service: light.toggle
    entity_id: light.leds_salon

# włączanie lampy w salonie jak pojawi się ruch lub wyłączone światło/TV
- id: light_turn_on_salon_lamp
  alias: "Light Turn On Salon Lamp"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.motion_salon
        - binary_sensor.motion_antresola_2
      from: "off"
      to: "on"
    - platform: state
      entity_id: light.leds_salon
      from: "on"
      to: "off"
    - platform: state
      entity_id: light.bulbs_salon
      from: "on"
      to: "off"
    - platform: state
      entity_id: media_player.denon_salon
      to: "off"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - light.leds_salon
          - light.bulbs_salon
          - media_player.denon_salon
        state: "off"
      - condition: state
        entity_id:
          - binary_sensor.motion_salon
          - input_boolean.light_auto_turn_salon
        state: "on"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.lamp_salon
      data:
        brightness: 128
        color_temp: 330
    - service: input_boolean.turn_on
      entity_id: input_boolean.salon_light_motion_on

# wyłączenie lampy w salonie jak zniknie ruch lub włączy się światła
- id: light_turn_off_salon_lamp
  alias: "Light Turn Off Salon Lamp"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_salon
      from: "on"
      to: "off"
    - platform: state
      entity_id: light.leds_salon
      from: "off"
      to: "on"
    - platform: state
      entity_id: light.bulbs_salon
      from: "off"
      to: "on"
  condition:
    condition: state
    entity_id: input_boolean.salon_light_motion_on
    state: "on"
  action:
    - service: light.turn_off
      entity_id: light.lamp_salon
      data:
        transition: 10
    - service: input_boolean.turn_off
      entity_id: input_boolean.salon_light_motion_on

# Scena oświetlenia salonu film po włączeniu filmy/gry
- id: light_scene_film
  alias: "Light Scene Film"
  trigger:
    - platform: state
      entity_id: media_player.dune_salon
      to: "playing"
    - platform: state
      entity_id: media_player.playstation_salon
      to: "playing"
    - platform: state
      entity_id: input_select.salon_harmony
      to: "Smart TV"
    - platform: state
      entity_id: input_select.salon_harmony
      to: "Fire TV"
  condition:
    - condition: sun
      after: sunset
    - condition: template
      value_template: >-
        {{ is_state('light.leds_salon', 'on') or
            is_state('light.bulbs_salon', 'on') or
            is_state('light.lamp_salon', 'on') }}
    - condition: time
      after: "20:10:00"
    - condition: state
      entity_id: input_boolean.guests
      state: "off"
  action:
    service: input_select.select_option
    data:
      entity_id: input_select.light_scenes_salon
      option: "film"

# Scena oświetlenia salonu auto po wyłączeniu filmu/gry
- id: light_scene_auto_after_film
  alias: "Light Scene Auto After Film"
  trigger:
    - platform: state
      entity_id: media_player.dune_salon
      from: "playing"
      to: "on"
      for:
        seconds: 20
    - platform: state
      entity_id: media_player.playstation_salon
      from: "playing"
      to: "idle"
      for:
        seconds: 20
    - platform: template
      value_template: "{{ not is_state('input_select.salon_harmony', 'Smart TV') and not is_state('input_select.salon_harmony', 'Fire TV')}}"
  condition:
    - condition: template
      value_template: >-
        {{ is_state("light.leds_salon", "on") or
          is_state("light.bulbs_salon", "on") or
          is_state("light.lamp_salon", "on") }}
    - condition: state
      entity_id: input_select.light_scenes_salon
      state: "film"
  action:
    service: input_select.select_option
    data:
      entity_id: input_select.light_scenes_salon
      option: "automatyczny"

## ANTRESOLA ##
# włączanie lampki na antresoli jak jest ciemno i jest ruch
- id: light_turn_on_antresola_lamp
  alias: "Light Turn On Antresola Lamp"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_antresola
    from: "off"
    to: "on"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - light.gateway_antresola
        state: "off"
      - condition: numeric_state
        entity_id: sensor.illumination_antresola
        below: 60
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.gateway_antresola
      data:
        brightness: 200
        rgb_color:
          [
            "{{ (range(0, 255)|random) }}",
            "{{ (range(0, 255)|random) }}",
            "{{ (range(0, 255)|random) }}",
          ]
    - service: input_boolean.turn_on
      entity_id: input_boolean.antresola_light_motion_on

# wyłączanie lampki na antresoli jak brak ruchu
- id: light_turn_off_antresola_lamp
  alias: "Light Turn Off Antresola Lamp"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_antresola
    from: "on"
    to: "off"
  condition:
    condition: state
    entity_id: input_boolean.antresola_light_motion_on
    state: "on"
  action:
    - service: homeassistant.turn_off
      entity_id:
        - light.gateway_antresola
        - input_boolean.antresola_light_motion_on

## SYPIALNIA ##
# włączanie LEDów w sypialni jak jest ruch i ciemno
- id: light_turn_on_sypialnia_leds_when_dark_and_motion
  alias: "Light Turn On Sypialnia LEDs When Dark And Motion"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sypialnia
      from: "off"
      to: "on"
    - platform: numeric_state
      entity_id: sensor.illumination_sypialnia
      below: 3
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - light.lightstrip_sypialnia
        state: "off"
      - condition: numeric_state
        entity_id: sensor.illumination_sypialnia
        below: 3
      - condition: state
        entity_id: binary_sensor.motion_sypialnia
        state: "on"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.lightstrip_sypialnia
      data:
        brightness: 200
        rgb_color: [233, 96, 255]
    - service: input_boolean.turn_on
      entity_id: input_boolean.sypialnia_light_motion_on

# wyłączanie LEDów w sypialni jak brak ruchu
- id: light_turn_off_sypialnia_leds
  alias: "Light Turn Off Sypialnia LEDs"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sypialnia
    from: "on"
    to: "off"
  condition:
    condition: state
    entity_id: input_boolean.sypialnia_light_motion_on
    state: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.sypialnia_light_motion_on
    - service: light.turn_off
      entity_id: light.lightstrip_sypialnia
      data:
        transition: 10

## PRZEDPOKÓJ ##
# włączanie LEDów w przedpokoju jak jest ruch i ciemno
- id: light_turn_on_przedpokoj_leds_when_dark_and_motion
  alias: "Light Turn On Przedpokoj LEDs When Dark And Motion"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_przedpokoj
      from: "off"
      to: "on"
    - platform: numeric_state
      entity_id: sensor.illumination_przedpokoj
      below: 9
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - light.leds_przedpokoj
          - light.bulbs_salon
          - light.leds_salon
        state: "off"
      - condition: numeric_state
        entity_id: sensor.illumination_przedpokoj
        below: 9
      - condition: state
        entity_id: binary_sensor.motion_przedpokoj
        state: "on"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.leds_przedpokoj
    - service: input_boolean.turn_on
      entity_id: input_boolean.przedpokoj_light_motion_on

# wyłączanie LEDów w przedpokoju jak brak ruchu
- id: light_turn_off_przedpokoj_leds
  alias: "Light Turn Off Przedpokoj LEDs"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_przedpokoj
    from: "on"
    to: "off"
  condition:
    condition: state
    entity_id: input_boolean.przedpokoj_light_motion_on
    state: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.przedpokoj_light_motion_on
    - service: light.turn_off
      entity_id: light.leds_przedpokoj

## POKÓJ ANTKA ##
# włączanie LEDów w pokoju Antka jak natężenie światła spadnie poniżej 3 i jest ruch
- id: light_turn_on_antek_leds_when_dark_and_motion
  alias: "Light Turn On Antek LEDs When Dark And Motion"
  trigger:
    - platform: numeric_state
      entity_id: sensor.illumination_antek
      below: 3
    - platform: state
      entity_id: binary_sensor.motion_antek
      from: "off"
      to: "on"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - light.lightstrip_antek
          - input_boolean.antek_lamp_night
        state: "off"
      - condition: state
        entity_id: binary_sensor.motion_antek
        state: "on"
      - condition: numeric_state
        entity_id: sensor.illumination_antek
        below: 3
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: script.light_turn_on_antek_leds
    - service: switch.turn_on
      entity_id: switch.cabinet_antek
    - service: input_boolean.turn_on
      entity_id: input_boolean.antek_light_motion_on

# wyłączanie LEDów w pokoju Antka jak brak ruchu
- id: light_turn_off_antek_leds_via_motion
  alias: "Light Turn Off Antek LEDs Via Motion"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_antek
    from: "on"
    to: "off"
  condition:
    condition: state
    entity_id: input_boolean.antek_light_motion_on
    state: "on"
  action:
    - service: script.light_turn_off_antek_leds
    - service: switch.turn_off
      entity_id: switch.cabinet_antek

# włączanie LEDów w pokoju Antka w tryb nocny
- id: light_turn_on_antek_leds_night
  alias: "Light Turn On Antek LEDs Night"
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_light_antek
      click_type: hold
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - input_boolean.antek_lamp_night
        state: "off"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.lightstrip_antek
      data:
        brightness: 15
        rgb_color: [255, 190, 0]
    - service: input_boolean.turn_on
      entity_id: input_boolean.antek_lamp_night
    - service: input_boolean.turn_off
      entity_id: input_boolean.antek_light_motion_on

# wyłączanie LEDów w pokoju Antka z trybu nocnego
- id: light_turn_off_antek_leds_night
  alias: "Light Turn Off Antek LEDs Night"
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_light_antek
      click_type: hold
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: "off"
      - condition: state
        entity_id: input_boolean.antek_lamp_night
        state: "on"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: script.light_turn_on_antek_leds
    - service: input_boolean.turn_off
      entity_id: input_boolean.antek_lamp_night

# wyłączanie LEDów w pokoju Antka jak wschód słońca
- id: light_turn_off_antek_leds_at_sunrise
  alias: "Light Turn Off Antek LEDs At Sunrise"
  trigger:
    platform: sun
    event: sunrise
  condition:
    condition: state
    entity_id: light.lightstrip_antek
    state: "on"
  action:
    service: script.light_turn_off_antek_leds

# włączenie LEDów w pokoju Antka
- id: light_turn_on_antek_leds_via_switch
  alias: "Light Turn On Antek LEDs Via Switch"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_antek
        click_type: single
  condition:
    condition: state
    entity_id: light.lightstrip_antek
    state: "off"
  action:
    service: script.light_turn_on_antek_leds

# wyłączenie LEDów w pokoju Antka
- id: light_turn_off_antek_leds_via_switch
  alias: "Light Turn Off Antek LEDs Via Switch"
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_light_antek
      click_type: single
  condition:
    condition: state
    entity_id: light.lightstrip_antek
    state: "on"
  action:
    service: light.turn_off
    entity_id: light.lightstrip_antek

# włączenie/wyłączenie ledów w gablocie w pokoju Antka
- id: light_toggle_antek_cabinet
  alias: "Light toggle Antek Cabinet"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_antek
        click_type: double
  action:
    service: switch.toggle
    entity_id: switch.cabinet_antek

# wyłączanie oświetlenia gabloty w pokoju Antka o 22, 23, 00
- id: light_turn_off_antek_cabinet_at_night
  alias: "Light Turn Off Antek Cabinet At Night"
  trigger:
    - platform: time
      at:
        - "22:00:00"
        - "23:00:00"
        - "00:00:00"
  condition:
    condition: state
    entity_id: switch.cabinet_antek
    state: "on"
  action:
    service: switch.turn_off
    entity_id: switch.cabinet_antek

#### PRACOWNIA ####
# włączanie lampki w pracowni jak ruch i ciemno
- id: light_turn_on_pracownia_lamp_when_dark_and_motion
  alias: "Light Turn On Pracownia Lamp When Dark And Motion"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_pracownia
      from: "off"
      to: "on"
    - platform: numeric_state
      entity_id: sensor.illumination_pracownia
      below: 8
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - switch.lamp_pracownia
        state: "off"
      - condition: numeric_state
        entity_id: sensor.illumination_pracownia
        below: 8
      - condition: state
        entity_id:
          - binary_sensor.motion_pracownia
          - input_boolean.light_auto_turn_pracownia
        state: "on"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: switch.turn_on
      entity_id: switch.lamp_pracownia
    - service: input_boolean.turn_on
      entity_id: input_boolean.pracownia_light_motion_on

# wyłączanie lampki w pracowni jak brak ruchu
- id: light_turn_off_pracownia_lamp
  alias: "Light Turn Off Pracownia Lamp"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_pracownia
    from: "on"
    to: "off"
  condition:
    condition: state
    entity_id: input_boolean.pracownia_light_motion_on
    state: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.pracownia_light_motion_on
    - service: switch.turn_off
      entity_id: switch.lamp_pracownia


#### GABINET ####
# włączanie oświetlenia w gabinecie jak ruch i ciemno
- id: light_turn_on_pracownia_light_when_dark_and_motion
  alias: "Light Turn On Pracownia Light When Dark And Motion"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_gabinet
      from: "off"
      to: "on"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: switch.stacjonarny
        state: "off"
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - light.ceiling_gabinet
        state: "off"
      - condition: numeric_state
        entity_id: sensor.illumination_gabinet
        below: 8
      - condition: state
        entity_id: input_boolean.light_auto_turn_gabinet
        state: "on"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    service: homeassistant.turn_on
    entity_id:
      - light.ceiling_gabinet
      - input_boolean.gabinet_light_motion_on

# wyłączanie oświetlenia w gabinecie jak brak ruchu
- id: light_turn_off_gabinet_lamp
  alias: "Light Turn Off Gabinet Lamp"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_gabinet
    from: "on"
    to: "off"
  condition:
    condition: state
    entity_id: input_boolean.gabinet_light_motion_on
    state: "on"
  action:
    service: homeassistant.turn_off
    entity_id:
      - input_boolean.gabinet_light_motion_on
      - light.ceiling_gabinet


#### POKÓJ GOŚCINNY ####
# wyłączanie lampki w pokoju gościnnym jak brak ruchu
- id: light_turn_off_goscinny_lamp
  alias: "Light Turn Off Goscinny Lamp"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_goscinny
    from: "on"
    to: "off"
  condition:
    condition: state
    entity_id: input_boolean.goscinny_light_motion_on
    state: "on"
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.goscinny_light_motion_on
    - service: switch.turn_off
      entity_id: switch.lamp_goscinny

# włączanie lampki w pokoju gościnnym jak ruch i ciemno
- id: light_turn_on_goscinny_lamp_when_dark_and_motion
  alias: "Light Turn On Goscinny Lamp When Dark And Motion"
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_goscinny
      from: "off"
      to: "on"
    - platform: numeric_state
      entity_id: sensor.illumination_goscinny
      below: 9
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id:
          - input_boolean.away_mode
          - switch.lamp_goscinny
        state: "off"
      - condition: template
        value_template: >-
          {{ is_state('media_player.mibox_goscinny', 'off') or
             is_state('media_player.mibox_goscinny', 'unavailable') }}
      - condition: numeric_state
        entity_id: sensor.illumination_goscinny
        below: 9
      - condition: state
        entity_id:
          - binary_sensor.motion_goscinny
          - input_boolean.light_auto_turn_goscinny
        state: "on"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: switch.turn_on
      entity_id: switch.lamp_goscinny
    - service: input_boolean.turn_on
      entity_id: input_boolean.goscinny_light_motion_on

##################################################################################################

#### HARMONY #####################################################################################
# poprawianie przełączania wejść amplitunera
- id: denon_bravia_input_helper
  alias: "Denon Bravia Input Switch Helper"
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    - condition: template
      value_template: "{{ trigger.from_state.attributes.current_activity != trigger.to_state.attributes.current_activity }}"
    - condition: template
      value_template: "{{ trigger.to_state.attributes.current_activity != 'PowerOff' }}"
  action:
    - delay: "00:00:07"
    - service: media_player.select_source
      entity_id: media_player.denon_salon
      data:
        source: >-
          {% if trigger.to_state.attributes.current_activity == 'Telewizja' %}
            CBL
          {% elif trigger.to_state.attributes.current_activity == 'Filmy' %}
            DUNE
          {% elif trigger.to_state.attributes.current_activity == 'PlayStation' %}
            TV
          {% elif trigger.to_state.attributes.current_activity == 'Xbox' %}
            XBOX
          {% elif trigger.to_state.attributes.current_activity == 'Muzyka' %}
            Online Music
          {% elif trigger.to_state.attributes.current_activity == 'Smart TV' %}
            TV
          {% elif trigger.to_state.attributes.current_activity == 'Fire TV' %}
            TV
          {% endif %}
    - service: media_player.select_source
      entity_id: media_player.bravia_salon
      data:
        source: >-
          {% if trigger.to_state.attributes.current_activity == 'Telewizja' %}
            HDMI 3/ARC
          {% elif trigger.to_state.attributes.current_activity == 'Filmy' %}
            HDMI 3/ARC
          {% elif trigger.to_state.attributes.current_activity == 'PlayStation' %}
            HDMI 2
          {% elif trigger.to_state.attributes.current_activity == 'Xbox' %}
            HDMI 3/ARC
          {% elif trigger.to_state.attributes.current_activity == 'Muzyka' %}
            HDMI 3/ARC
          {% elif trigger.to_state.attributes.current_activity == 'Fire TV' %}
            HDMI 1
          {% endif %}

# wyłączenie telewizora jeśli Harmony przejdzie do aktywności PowerOff
- id: harmony_turn_off_television
  alias: "Harmony Turn Off Television"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "PowerOff"
  condition:
    condition: state
    entity_id: media_player.bravia_salon
    state: "on"
  action:
    - delay: "00:00:02"
    - condition: state
      entity_id: media_player.bravia_salon
      state: "on"
    - service: media_player.turn_off
      entity_id: media_player.bravia_salon

# wyłączenie PlayStation jeśli Harmony przejdzie do aktywności innej niż PlayStation
- id: harmony_turn_off_playstation
  alias: "Harmony Turn Off PlayStation"
  trigger:
    platform: state
    entity_id: remote.salon
    from: "PlayStation"
  condition:
    condition: state
    entity_id: media_player.playstation_salon
    state: "idle"
  action:
    - delay: "00:00:10"
    - condition: state
      entity_id: media_player.playstation_salon
      state: "idle"
    - service: media_player.turn_off
      entity_id: media_player.playstation_salon

- id: harmony_turn_off_tv
  alias: "Harmony Turn Off TV"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "PowerOff"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "wyłączony"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_telewizja
  alias: "Harmony Starts Telewizja"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "Telewizja"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "telewizja"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_filmy
  alias: "Harmony Starts Filmy"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "Filmy"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "filmy"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_muzyka
  alias: "Harmony Starts Muzyka"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "Muzyka"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "muzyka"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_smart_tv
  alias: "Harmony Starts Smart TV"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "Smart TV"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "Smart TV"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_fire_tv
  alias: "Harmony Starts Fire TV"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "Fire TV"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "Fire TV"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_playstation
  alias: "Harmony Starts PlayStation"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "Playstation"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "PlayStation"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command
    - service: media_player.turn_on
      entity_id: media_player.playstation_salon

- id: harmony_starts_xbox
  alias: "Harmony Starts Xbox"
  trigger:
    platform: state
    entity_id: remote.salon
    attribute: current_activity
    to: "Xbox"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: "Xbox"
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: hass_turn_off_tv
  alias: "HASS Turn Off TV"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "wyłączony"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    service: script.harmony_tv_off

- id: hass_starts_telewizja
  alias: "HASS Starts Telewizja"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "telewizja"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    service: script.harmony_telewizja

- id: hass_starts_filmy
  alias: "HASS Starts Filmy"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "filmy"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    service: script.harmony_filmy

- id: hass_starts_muzyka
  alias: "HASS Starts Muzyka"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "muzyka"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    service: script.harmony_muzyka

- id: hass_starts_smart_tv
  alias: "HASS Starts Smart TV"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "Smart TV"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    service: script.harmony_smart_tv

- id: hass_starts_fire_tv
  alias: "HASS Starts Fire TV"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "Fire TV"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    service: script.harmony_fire_tv

- id: hass_starts_playstation
  alias: "HASS Starts PlayStation"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "PlayStation"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    - service: script.harmony_playstation
    - service: media_player.turn_on
      entity_id: media_player.playstation_salon

- id: hass_starts_xbox
  alias: "HASS Starts Xbox"
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: "Xbox"
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: "off"
  action:
    service: script.harmony_xbox

##################################################################################################

#### CLIMATE ######################################################################################
# włączenie nawilżacza jak wilgotność poniżej 39% i sezon grzewczy
- id: humidification_start
  alias: "Humidification Start"
  trigger:
    platform: template
    value_template: "{{ states('sensor.humidity_salon') | float < states('input_select.target_humidity') | float }}"
  condition:
    - condition: numeric_state
      entity_id: sensor.humidifier_water_level
      above: 5
    - condition: state
      entity_id: input_boolean.heating_season
      state: "on"
    - condition: state
      entity_id:
        - input_boolean.heating_airing
        - input_boolean.away_mode
        - fan.humidifier_salon
      state: "off"
  action:
    service: fan.turn_on
    entity_id: fan.humidifier_salon

# wyłączenie nawilżacza jak sezon grzewczy i wilgotność powyżej 41% lub w zbiorniku mniej niż 6%
- id: humidification_stop
  alias: "Humidification Stop"
  trigger:
    - platform: template
      value_template: "{{ states('sensor.humidity_salon') | float > states('input_select.target_humidity') | float + 1 }}"
    - platform: numeric_state
      entity_id: sensor.humidifier_water_level
      below: 6
  condition:
    - condition: state
      entity_id:
        - input_boolean.heating_season
        - fan.humidifier_salon
      state: "on"
  action:
    - service: fan.turn_off
      entity_id: fan.humidifier_salon
    - condition: numeric_state
      entity_id: sensor.humidifier_water_level
      below: 6
    - choose:
        conditions:
          condition: state
          entity_id: person.maciek
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "Uzupełnij wodę w nawilżaczu"
            message: "Nawilżacz został wyłączony ponieważ w zbiorniku pozostało {{ states('sensor.humidifier_water_level') }}% wody."
            tag: "notification-humidifier"
            services:
              - service: !secret maciek_notify_service
                type: "android"
    - choose:
        conditions:
          condition: state
          entity_id: person.edyta
          state: "home"
        sequence:
          service: python_script.notify
          data:
            title: "Uzupełnij wodę w nawilżaczu"
            message: "Nawilżacz został wyłączony ponieważ w zbiorniku pozostało {{ states('sensor.humidifier_water_level') }}% wody."
            tag: "notification-humidifier"
            services:
              - service: !secret edyta_notify_service
                type: "ios"
    - choose:
        conditions:
          condition: state
          entity_id: media_player.bravia_salon
          state: "on"
        sequence:
          service: notify.bravia
          data:
            title: "Uzupełnij wodę w nawilżaczu"
            message: "Nawilżacz został wyłączony ponieważ w zbiorniku pozostało {{ states('sensor.humidifier_water_level') }}% wody."
            data:
              file:
                url: !secret favicon_url
              duration: 10
    - choose:
        conditions:
          condition: state
          entity_id: media_player.mibox_goscinny
          state: "on"
        sequence:
          service: notify.mibox
          data:
            title: "Uzupełnij wodę w nawilżaczu"
            message: "Nawilżacz został wyłączony ponieważ w zbiorniku pozostało {{ states('sensor.humidifier_water_level') }}% wody."
            data:
              file:
                url: !secret favicon_url
              duration: 10

- id: humidification_outdoor_temp_above_10
  alias: "Humidification Outdoor Temp Above 10"
  trigger:
    platform: numeric_state
    entity_id: sensor.temperature_outdoor
    above: 10
  condition:
    condition: state
    entity_id: input_boolean.heating_season
    state: "on"
  action:
    service: input_select.select_option
    data:
      entity_id: input_select.target_humidity
      option: "50"

- id: humidification_outdoor_temp_below_10
  alias: "Humidification Outdoor Temp Below 10"
  trigger:
    platform: numeric_state
    entity_id: sensor.temperature_outdoor
    below: 10
  condition:
    condition: state
    entity_id: input_boolean.heating_season
    state: "on"
  action:
    service: input_select.select_option
    data:
      entity_id: input_select.target_humidity
      option: "45"

##################################################################################################

#### OTHERS ######################################################################################
- id: log_level
  alias: "Log Level"
  trigger:
    platform: state
    entity_id: input_select.log_level
  action:
    service: logger.set_level
    data:
      homeassistant.components: "{{ trigger.to_state.state }}"

- id: shellies_announce
  alias: "Shellies Announce"
  trigger:
    - platform: homeassistant
      event: start
    - platform: time_pattern
      hours: "/1"
  action:
    service: mqtt.publish
    data:
      topic: "shellies/command"
      payload: "announce"

- id: shellies_discovery
  alias: "Shellies Discovery"
  mode: queued
  max: 999
  trigger:
    platform: mqtt
    topic: "shellies/announce"
  action:
    service: python_script.shellies_discovery
    data:
      id: "{{ trigger.payload_json.id }}"
      mac: "{{ trigger.payload_json.mac }}"
      fw_ver: "{{ trigger.payload_json.fw_ver }}"
      model: "{{ trigger.payload_json.model }}"
      qos: 1
      shelly1-328900:
        relay-0: "light"
      shellyswitch-5B2604:
        relay-1: "light"
      shellyht-E00ABD:
        powered: "ac"
        force_update_sensors: true
        expire_after: 1320
      shellyflood-F2AD1D:
        expire_after: 95040
      shelly1l-483FDA701559:
        relay-0: "light"

- id: frontend_set_theme
  alias: "Frontend Set Theme"
  trigger:
    platform: homeassistant
    event: start
  action:
    service: frontend.set_theme
    data:
      name: blue-mix

- id: hassio_snapshot
  alias: "Hassio Snapshot"
  trigger:
    platform: time
    at: "02:00:00"
  condition:
    condition: time
    weekday:
      - sun
  action:
    service: hassio.snapshot_full
    data:
      name: "{{ now().strftime('%Y-%m-%d') }}"
