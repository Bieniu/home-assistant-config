#### PURGE RECORDER DATABASE ###################################################
- id: purge_recorder_database
  alias: 'Purge Recorder Database'
  trigger:
    platform: time
    hours: 3
    minutes: 0
    seconds: 0
  condition:
    condition: time
    weekday:
    - mon
    - wed
    - fri
  action:
    service: recorder.purge
    data:
      keep_days: 4
################################################################################

#### NOTIFICATIONS #############################################################
# zamknięcie powiadomienia w panelu WWW po zamknięciu powiadomienia w telefonie
- id: persistant_notification_close_via_html5_notification_callback
  alias: 'Persistant Notification Close Via HTML5 Notification Callback'
  trigger:
    platform: event
    event_type: html5_notification.closed
  action:
    service: persistent_notification.dismiss
    data_template:
      notification_id: '{{ trigger.event.data.tag }}'

# powiadomienie o wygasającym certyfikacie SSL
- id: notification_ssl_cert_expiry
  alias: 'Notification SSL Cert Expiry'
  trigger:
    platform: template
    value_template: "{{ states('sensor.ssl_certificate_expiry') | int < 11 }}"
  action:
    - service: script.notify
      data_template:
        notify_edyta: false
        title: 'Wygasa certyfikat SSL'
        message: "Za {{ states('sensor.ssl_certificate_expiry') }} dni wygaśnie certyfikat SSL serwera WWW."
        tag: 'notification-ssl-cert'
    - service: persistent_notification.create
      data_template:
        title: 'Wygasa certyfikat SSL'
        message: "Za {{ states('sensor.ssl_certificate_expiry') }} dni wygaśnie certyfikat SSL serwera WWW."
        notification_id: 'notification-ssl-cert'

# powiadomienie z Custom Updatera
- id: notification_from_custom_updater
  alias: 'Notification From Custom Updater'
  trigger:
    - platform: numeric_state
      entity_id: sensor.custom_card_tracker
      above: 0
    - platform: numeric_state
      entity_id: sensor.custom_python_script_tracker
      above: 0
    - platform: numeric_state
      entity_id: sensor.custom_component_tracker
      above: 0
  action:
    - service: script.notify
      data:
        notify_edyta: false
        title: 'Aktualizacja karty/skryptu/komponentu'
        message: "Dostępna jest aktualizacja karty, skryptu lub komponentu Home Assistant'a."
        tag: 'notification-custom-updater-update'
    - service: persistent_notification.create
      data_template:
        title: 'Aktualizacja karty/skryptu/komponentu'
        message: "Dostępna jest aktualizacja karty, skryptu lub komponentu Home Assistant'a."
        notification_id: 'notification-custom-updater-update'

# powiadomienie o encji ze stanem dead lub unavailable
- id: notification_dead_or_unavailable
  alias: 'Notification dead or unavailable'
  trigger:
    platform: time
    minutes: '/10'
    seconds: 0
  condition:
    condition: template
    value_template: >
      {% macro dead_unavailable_entities() %}
        {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'fan', 'binary_sensor'] -%}
        {%- set rooms = ['przedpokoj', 'goscinny', 'pracownia', 'kuchnia', 'salon', 'schody', 'antresola', 'gabinet', 'pralnia', 'antek', 'sypialnia', 'lazienka', 'balkon', 'indoor'] -%}
        {% for domain in domains -%}
          {% for item in states[domain] if (item.entity_id.split('_')[-1] in rooms or item.entity_id.split('_')[-2] in rooms) and not ('battery' in item.entity_id or 'bulb' in item.entity_id or 'status' in item.entity_id) and item.state is defined and (item.state == 'dead' or item.state == 'unavailable') %}
            - {{ item.name }} ({{ item.entity_id }})
          {%- endfor %}
        {%- endfor %}
      {% endmacro %}
      {{ dead_unavailable_entities()  | trim != '' }}
  action:
    - service: script.notify
      data_template:
        notify_edyta: false
        title: 'Encja z nieprawidłowym stanem'
        message: >
          {% macro dead_unavailable_entities() %}
            {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'fan', 'binary_sensor'] -%}
            {%- set rooms = ['przedpokoj', 'goscinny', 'pracownia', 'kuchnia', 'salon', 'schody', 'antresola', 'gabinet', 'pralnia', 'antek', 'sypialnia', 'lazienka', 'balkon', 'indoor'] -%}
            {% for domain in domains -%}
              {% for item in states[domain] if (item.entity_id.split('_')[-1] in rooms or item.entity_id.split('_')[-2] in rooms) and not ('battery' in item.entity_id or 'bulb' in item.entity_id or 'status' in item.entity_id) and item.state is defined and (item.state == 'dead' or item.state == 'unavailable') %}
           - {{ item.name }} ({{ item.entity_id }})
              {%- endfor %}
            {%- endfor %}
          {% endmacro %}
          Następujące encje mają nieprawidłowe stany: {{ dead_unavailable_entities() }}
        tag: 'notification-dead-unvailable'
    - service: persistent_notification.create
      data_template:
        title: 'Encja z nieprawidłowym stanem'
        message: >
          {% macro dead_unavailable_entities() %}
            {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'fan', 'binary_sensor'] -%}
            {%- set rooms = ['przedpokoj', 'goscinny', 'pracownia', 'kuchnia', 'salon', 'schody', 'antresola', 'gabinet', 'pralnia', 'antek', 'sypialnia', 'lazienka', 'balkon', 'indoor'] -%}
            {% for domain in domains -%}
              {% for item in states[domain] if (item.entity_id.split('_')[-1] in rooms or item.entity_id.split('_')[-2] in rooms) and not ('battery' in item.entity_id or 'bulb' in item.entity_id or 'status' in item.entity_id) and item.state is defined and (item.state == 'dead' or item.state == 'unavailable') %}
           - {{ item.name }} ({{ item.entity_id }})
              {%- endfor %}
            {%- endfor %}
          {% endmacro %}
          Następujące encje mają nieprawidłowe stany: {{ dead_unavailable_entities() }}
        notification_id: 'notification-dead-unvailable'

# powiadomienie o aktualizacji
- id: notification_custom_update_available
  alias: 'Notification Custom Update Available'
  trigger:
    platform: state
    entity_id: sensor.ha_version_current
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state != 'unknown' }}"
      - condition: template
        value_template: "{{ states('sensor.ha_version_installed') != 'unknown' }}"
      - condition: template
        value_template: "{{ trigger.to_state.state != states('sensor.ha_version_installed') }}"
  action:
    - service: script.notify
      data_template:
        title: "Aktualizacja Home Assistant'a"
        message: "Dostępna jest aktualizacja do wersji {{ states('sensor.ha_version_current') }} dla Home Assistant'a."
        tag: 'notification-hass-update'
        notify_edyta: false
    - service: persistent_notification.create
      data_template:
        title: "Aktualizacja Home Assistant'a"
        message: "Dostępna jest aktualizacja do wersji {{ states('sensor.ha_version_current') }} dla Home Assistant'a."
        notification_id: 'notification-hass-update'

# powiadomienie o aktualizacji oprogramowania Shelly
- id: notification_shelly_update_available
  alias: 'Notification Shelly Update Available'
  trigger:
    - platform: state
      entity_id: sensor.shelly1_firmware_version_current
    - platform: state
      entity_id: sensor.shelly2_firmware_version_current
  condition:
    condition: template
    value_template: "{{ trigger.to_state.state != 'unknown' }}"
  action:
    - service: script.notify
      data_template:
        title: 'Aktualizacja oprogramowania Shelly'
        message: 'Dostępna jest aktualizacja do wersji {{ trigger.to_state.state }} oprogramowania dla {{ trigger.to_state.attributes.friendly_name }}.'
        tag: 'notification-shelly-update'
        notify_edyta: false
    - service: persistent_notification.create
      data_template:
        title: 'Aktualizacja oprogramowania Shelly'
        message: 'Dostępna jest aktualizacja do wersji {{ trigger.to_state.state }} oprogramowania dla {{ trigger.to_state.attributes.friendly_name }}.'
        notification_id: 'notification-shelly-update'

# powiadomienie o aktualizacji Tasmota
- id: notification_tasmota_update_available
  alias: 'Notification Tasmota Update Available'
  trigger:
    platform: state
    entity_id: sensor.tasmota_version_current
  condition:
    condition: template
    value_template: "{{ trigger.to_state.state != 'unknown' }}"
  action:
    - service: script.notify
      data_template:
        title: 'Aktualizacja Sonoff-Tasmota'
        message: 'Dostępna jest aktualizacja do wersji {{ trigger.to_state.state }} dla Sonoff-Tasmota.'
        tag: 'notification-tasmota-update'
        notify_edyta: false
    - service: persistent_notification.create
      data_template:
        title: 'Aktualizacja Sonoff-Tasmota'
        message: 'Dostępna jest aktualizacja do wersji {{ trigger.to_state.state }} dla Sonoff-Tasmota.'
        notification_id: 'notification-tasmota-update'

# powiadomienie o wysokim stężeniu CO2 w salonie
- id: notification_salon_co2
  alias: 'Notification Salon CO2'
  trigger:
    platform: numeric_state
    entity_id: sensor.co2_salon
    above: 1000
    for:
      minutes: 5
  condition:
    condition: state
    entity_id: input_boolean.away_mode
    state: 'off'
  action:
    service: script.notify
    data_template:
      title: 'Wysokie stężenie dwutlenku węgla'
      message: "W salonie stężenie dwutlenku węgla wynosi {{ trigger.to_state.state }} ppm. Należy przewietrzyć pomieszczenie."
      tag: 'notification-salon-co2'
      notify_edyta: true

# powiadomienie jak jest ruch i nikogo w domu
- id: notification_motion_when_away_mode
  alias: 'Notification Motion When Away Mode'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.motion_antresola
        - binary_sensor.motion_salon
        - binary_sensor.motion_sypialnia
        - binary_sensor.motion_antek
        - binary_sensor.motion_przedpokoj
        - binary_sensor.motion_pracownia
      from: 'off'
      to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.away_mode
    state: 'on'
    for:
      minutes: 10
  action:
    service: script.notify_motion
    data_template:
      title: 'Wykryto ruch w pustym mieszkaniu'
      message: "Pomieszczenie: {{ trigger.to_state.attributes.location }}, godzina {{ now().strftime('%H:%M') }}."
      tag: 'notification-hass-motion'
      datetime: "{{ now().strftime('%Y%m%d%H%M%S') }}"
      snapshot_url: !secret snapshot_url
      location: '{{ trigger.to_state.attributes.location }}'
      notify_edyta: true

# powiadomienie jak otworzy się okno i nikogo w domu
- id: notification_window_opened_when_away_mode
  alias: 'Notification Window Opened When Away Mode'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.balcony_door_sypialnia
        - binary_sensor.window_kuchnia
        - binary_sensor.balcony_door_pracownia
        - binary_sensor.window_antresola
        - binary_sensor.window_antek
      from: 'off'
      to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.away_mode
    state: 'on'
    for:
      minutes: 10
  action:
    service: script.notify
    data_template:
      notify_edyta: true
      title: 'Wykryto otwarcie okna w pustym mieszkaniu'
      message: "Pomieszczenie: {{ trigger.to_state.attributes.location }}, godzina {{ now().strftime('%H:%M') }}."
      tag: 'notification-hass-window-opened'

# powiadomienia o małej ilości miejsca na Synology
- id: notification_low_disk_space_on_synology
  alias: 'Notification Low Disk Space On Synology'
  trigger:
    platform: numeric_state
    entity_id: sensor.synology_disk_used
    above: 70
  action:
    - service: script.notify
      data_template:
        title: 'Mało miejsca na dysku Synology'
        message: 'Dysk Synology jest zapełniony w {{ trigger.to_state.state }}%.'
        tag: 'notification-synology-low-disk'
        notify_edyta: false
    - service: persistent_notification.create
      data_template:
        title: 'Mało miejsca na dysku Synology'
        message: 'Dysk Synology jest zapełniony w {{ trigger.to_state.state }}%.'
        notification_id: 'notification-synology-low-disk'

# powiadomienie o wykryciu nowego urządzenia
- id: notification_new_device
  alias: 'Notification New Device'
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
    - service: script.notify
      data_template:
        notify_edyta: false
        title: 'Nowe urządzenie'
        message: 'Wykryto nowe urządzenie o nazwie {{trigger.event.data.host_name}} ({{trigger.event.data.entity_id}}).'
        tag: 'notification-new-device'
    - service: persistent_notification.create
      data_template:
        title: 'Nowe urządzenie'
        message: 'Wykryto nowe urządzenie o nazwie {{trigger.event.data.host_name}} ({{trigger.event.data.entity_id}}).'
        notification_id: 'notification-new-device'

# powiadomienie o niskim poziomie naładowania baterii
- id: notification_low_battery
  alias: 'Notification Low Battery'
  trigger:
    platform: time
    at: '18:00:00'
  condition:
    condition: template
    value_template: >
      {% macro battery_level() %}
        {%- set threshold = 10 -%}
        {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock', 'binary_sensor'] -%}
        {% for domain in domains -%}
          {% for item in states[domain] if (((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ('battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown')))) and not (( 'humidity' in item.entity_id) or ('illumination' in item.entity_id)) -%}
            {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) %}
              - {{ item.entity_id }} [{{ item.attributes['battery_level'] | round(0) }}%]{% endif -%}
            {% if 'battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown') %}
              - {{ item.entity_id }} [{{ item.state | round(0) }}%]{% endif -%}
          {% endfor %}
        {%- endfor %}
      {% endmacro %}
      {{ battery_level() | trim != '' }}
  action:
    - service: script.notify
      data_template:
        notify_edyta: false
        title: 'Niski poziom naładowania baterii'
        message: >
          {% macro battery_level() %}
            {%- set threshold = 10 -%}
            {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock', 'binary_sensor'] -%}
            {% for domain in domains -%}
              {% for item in states[domain] if (((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ('battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown')))) and not (( 'humidity' in item.entity_id) or ('illumination' in item.entity_id)) -%}
                {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) %}
           - {{ item.entity_id }} [{{ item.attributes['battery_level'] | round(0) }}%]{% endif -%}
                {% if 'battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown') %}
           - {{ item.entity_id }} [{{ item.state | round(0) }}%]{% endif -%}
              {% endfor %}
            {%- endfor %}
          {% endmacro %}
          W następujących urządzeniach jest niski poziom naładowania baterii: {{ battery_level() }}
        tag: 'notification-low-battery'
    - service: persistent_notification.create
      data_template:
        title: 'Niski poziom naładowania baterii'
        message: >
          {% macro battery_level() %}
            {%- set threshold = 10 -%}
            {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock', 'binary_sensor'] -%}
            {% for domain in domains -%}
              {% for item in states[domain] if (((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ('battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown')))) and not (( 'humidity' in item.entity_id) or ('illumination' in item.entity_id)) -%}
                {% if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) %}
           - {{ item.entity_id }} [{{ item.attributes['battery_level'] | round(0) }}%]{% endif -%}
                {% if 'battery' in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == 'low' or item.state | lower == 'unknown') %}
           - {{ item.entity_id }} [{{ item.state | round(0) }}%]{% endif -%}
              {% endfor %}
            {%- endfor %}
          {% endmacro %}
          W następujących urządzeniach jest niski poziom naładowania baterii: {{ battery_level() }}
        notification_id: 'notification-low-battery'

##################################################################################################

#### OBECNOŚĆ ####################################################################################
# Goście w domu
- id: guests_at_home
  alias: 'Guests At Home'
  trigger:
    platform: state
    entity_id: binary_sensor.guests
    to: 'on'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.guests

# Gościa poza domem
- id: no_guests_at_home
  alias: 'No Guests At Home'
  trigger:
    platform: state
    entity_id: binary_sensor.guests
    to: 'off'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.guests

# Edyta 40 minut od domu
- id: presence_edyta_far_from_home
  alias: 'Presence Edyta Far From Home'
  trigger:
    platform: numeric_state
    entity_id: sensor.edyta_to_home
    above: 40
  condition:
    condition: state
    entity_id: input_boolean.edyta_far_from_home
    state: 'off'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.edyta_far_from_home

# Maciek 40 minut od domu
- id: presence_maciek_far_from_home
  alias: 'Presence Maciek Far From Home'
  trigger:
    platform: numeric_state
    entity_id: sensor.maciek_to_home
    above: 40
  condition:
    condition: state
    entity_id: input_boolean.maciek_far_from_home
    state: 'off'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.maciek_far_from_home

# Maciek wrócił do domu
- id: presence_maciek_come_back_home
  alias: 'Presence Maciek Come Back Home'
  trigger:
    platform: state
    entity_id: device_tracker.maciek
    to: 'home'
  condition:
    condition: state
    entity_id: input_boolean.maciek_far_from_home
    state: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.maciek_far_from_home

# Edyta wróciła do domu
- id: presence_edyta_come_back_home
  alias: 'Presence Edyta Come Back Home'
  trigger:
    platform: state
    entity_id: device_tracker.edyta
    to: 'home'
  condition:
    condition: state
    entity_id: input_boolean.edyta_far_from_home
    state: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.edyta_far_from_home

# domownicy poza domem
- id: presence_peoples_away
  alias: 'Presence Peoples Away'
  trigger:
    platform: state
    entity_id: binary_sensor.people_at_home
    to: 'off'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.away_mode
    - condition: state
      entity_id: group.windows
      state: 'on'
    - condition: numeric_state
      entity_id: sensor.dark_sky_precip_probability
      above: 20
    - service: script.notify
      data_template:
        notify_edyta: true
        title: 'Otwarte okna'
        message: "Okna w mieszkaniu nie są zamknięte, a prawdopodobieństwo opadów wynosi {{ states('sensor.dark_sky_precip_probability') }}%."
        tag: 'notification-opened-window'

# domownicy w domu
- id: presence_peoples_back
  alias: 'Presence Peoples Back'
  trigger:
    platform: state
    entity_id: binary_sensor.people_at_home
    to: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.away_mode
##################################################################################################

#### HEATING #####################################################################################
# zwiększenie temperatury rano w tygodniu jeśli ktoś jest w domu i trwa sezon grzewczy
- id: heating_day
  alias: 'Heating Day'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 0
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ now().strftime('%H:%M') == states('input_select.heating_night_end') }}"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
  action:
    service: script.heating_day

# zmniejszenie temperatury na noc w tygodniu jeśli trwa sezon grzewczy
- id: heating_night
  alias: 'Heating Night'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 0
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ now().strftime('%H:%M') == states('input_select.heating_night_start') }}"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
  action:
    service: script.heating_night

# zwiększenie temperatury rano w weekendy jeśli ktoś jest w domu i trwa sezon grzewczy
- id: heating_day_weekend
  alias: 'Heating Day Weekend'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 0
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ now().strftime('%H:%M') == states('input_select.heating_night_end_weekend') }}"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'off'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
  action:
    service: script.heating_day

# zmniejszenie temperatury na noc w weekendy jeśli trwa sezon grzewczy
- id: heating_night_weekend
  alias: 'Heating Night Weekend'
  trigger:
    platform: time
    minutes: '/1'
    seconds: 0
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ now().strftime('%H:%M') == states('input_select.heating_night_start_weekend') }}"
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'off'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
  action:
    service: script.heating_night

# zmniejszenie temperatury na noc w salonie i kuchni po wyłączeniu TV
- id: heating_night_salon_and_kuchnia
  alias: 'Heating Night Salon and Kuchnia'
  trigger:
    platform: state
    entity_id: media_player.denon
    to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_night
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_salon_kuchnia_night
        state: 'off'
  action:
    - service: climate.set_temperature
      entity_id:
        - climate.thermostat_kuchnia
        - climate.thermostat_salon
      data_template:
        temperature: "{{ states('input_select.heating_temp_night') }}"
    - service: fan.turn_off
      entity_id: fan.humidifier_salon

# zmniejszenie temperatury gdy domownicy wychodzą i jest sezon grzewczy
- id: heating_eco_mode
  alias: 'Heating Eco Mode'
  trigger:
    platform: state
    entity_id: input_boolean.away_mode
    from: 'off'
    to: 'on'
    for:
      minutes: 10
  condition:
    condition: state
    entity_id: input_boolean.heating_season
    state: 'on'
  action:
    service: script.heating_eco_mode

# zwiększenie temperatury gdy domownicy wracają i jest sezon grzewczy
- id: heating_peoples_back
  alias: 'Heating Peoples Back'
  trigger:
    platform: state
    entity_id: input_boolean.away_mode
    from: 'on'
    to: 'off'
  condition:
    condition: and
    conditions:
      - condition: time
        after: '05:30:00'
        before: '22:00:00'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
  action:
      service: script.heating_day

- id: heating_peoples_back_night
  alias: 'Heating Peoples Back Night'
  trigger:
    platform: state
    entity_id: input_boolean.away_mode
    from: 'on'
    to: 'off'
  condition:
    condition: and
    conditions:
      - condition: time
        after: '22:00:00'
        before: '05:30:00'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
  action:
    service: script.heating_night

# włączenie ogrzewania 30 minut przed powrotem do domu w dzień gdy jest sezon grzewczy
- id: heating_turn_on_before_return_to_home
  alias: 'Heating Turn On Before Return To Home'
  trigger:
    - platform: numeric_state
      entity_id: sensor.maciek_to_home
      below: 30
    - platform: numeric_state
      entity_id: sensor.edyta_to_home
      below: 30
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.edyta_far_from_home
        state: 'on'
      - condition: state
        entity_id: input_boolean.maciek_far_from_home
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'on'
      - condition: state
        entity_id: script.heating_fast_warm_up
        state: 'off'
  action:
    - service: script.heating_day
    - service: input_boolean.turn_off
      entity_id:
        - input_boolean.edyta_far_from_home
        -  input_boolean.maciek_far_from_home

# włączenie szybkiego dogrzewania 60 minut przed powrotem do domu w dzień gdy jest sezon grzewczy gdy nieobecność domowników dłuższa niż 10 godzin
- id: heating_heating_fast_warm_up_before_return_to_home
  alias: 'Heating Fast Warm Up Before Return To Home'
  trigger:
    - platform: numeric_state
      entity_id: sensor.maciek_to_home
      below: 60
    - platform: numeric_state
      entity_id: sensor.edyta_to_home
      below: 60
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.edyta_far_from_home
        state: 'on'
      - condition: state
        entity_id: input_boolean.maciek_far_from_home
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'on'
        for:
          hours: 6
      - condition: state
        entity_id: script.heating_fast_warm_up
        state: 'off'
  action:
    - service: script.heating_fast_warm_up
    - service: input_boolean.turn_off
      entity_id:
        - input_boolean.edyta_far_from_home
        - input_boolean.maciek_far_from_home
    - service: script.notify
      data:
        notify_edyta: true
        title: 'Włączono szybkie dogrzanie'
        message: 'Włączono szybie dogrzanie pomieszczeń po długiej nieobecności domowników.'
        tag: 'notification-heating-fat-warm-up'
    - condition: numeric_state
      entity_id: sensor.humidity_salon
      below: 39
    - service: fan.turn_on
      entity_id: fan.humidifier_salon

# początek przewietrzania
- id: heating_airing_begin
  alias: 'Heating Airing Begin'
  trigger:
    - platform: state
      entity_id: input_boolean.heating_airing
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: group.windows
      from: 'off'
      to: 'on'
      for:
        minutes: 15
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
  action:
    service: script.heating_airing_begin

# koniec przewietrzania
- id: heating_airing_end
  alias: 'Heating Airing End'
  trigger:
    - platform: state
      entity_id: input_boolean.heating_airing
      from: 'on'
      to: 'off'
    - platform: state
      entity_id: group.windows
      from: 'on'
      to: 'off'
      for:
        minutes: 10
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
  action:
    - service: script.heating_day
    - service: input_boolean.turn_off
      entity_id: input_boolean.heating_airing
    - condition: state
      entity_id: group.windows
      state: 'on'
    - service: script.notify
      data:
        notify_edyta: true
        title: 'Koniec przewietrzania'
        message: 'Wyłączono tryb przewietrzania. Proszę zamknąć okna!'
        tag: 'notification-airing-end'

# koniec przewietrzania o zachodzie słońca
- id: heating_airing_end_at_sunset
  alias: 'Heating Airing End At Sunset'
  trigger:
    platform: sun
    event: sunset
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_airing
        state: 'on'
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.heating_airing

# początek sezonu grzewczego
- id: heating_season_begin
  alias: 'Heating Season Begin'
  trigger:
    platform: state
    entity_id: input_boolean.heating_season
    from: 'off'
    to: 'on'
  action:
    service: script.heating_day

# koniec sezonu grzewczego
- id: heating_season_end
  alias: 'Heating Season End'
  trigger:
    platform: state
    entity_id: input_boolean.heating_season
    from: 'on'
    to: 'off'
  action:
    service: script.heating_season_end

# zmniejszanie nastawy termostatu do 22 stopni gdy temperatura w łazience przekroczy 22.8 stopnie
- id: heating_lazienka_target_temp_down
  alias: 'Heating Lazienka Target Temp Down'
  trigger:
    platform: numeric_state
    entity_id: sensor.temperature_lazienka
    above: 22.8
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ state_attr('climate.thermostat_lazienka', 'temperature') | float > 22 }}"
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_airing
        state: 'off'
  action:
    service: climate.set_temperature
    entity_id: climate.thermostat_lazienka
    data:
      temperature: 22

# zwiekszenie nastawy termostatu do 23 stopni gdy temperatura w łazience poniżej 22 stopni
- id: heating_lazienka_target_temp_up
  alias: 'Heating Lazienka Target Temp Up'
  trigger:
    platform: numeric_state
    entity_id: sensor.temperature_lazienka
    below: 22.2
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ state_attr('climate.thermostat_lazienka', 'temperature') | float < 23 and state_attr('climate.thermostat_lazienka', 'temperature') | float > 20 }}"
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_airing
        state: 'off'
  action:
    service: climate.set_temperature
    entity_id: climate.thermostat_lazienka
    data:
      temperature: 23

# uruchamia skrypt aktualizaujący current temp
- id: heating_update_thermostats
  alias: 'Heating Update Thermostats'
  trigger:
    platform: state
    entity_id:
      - sensor.temperature_antek
      - sensor.temperature_salon
      - sensor.temperature_kuchnia
      - sensor.temperature_antresola
      - sensor.temperature_sypialnia
      - sensor.temperature_lazienka
      - climate.thermostat_antek
      - climate.thermostat_kuchnia
      - climate.thermostat_salon
      - climate.thermostat_antresola
      - climate.thermostat_sypialnia
      - climate.thermostat_lazienka
  condition:
    condition: template
    value_template: >-
      {% if 'thermostat' in trigger.entity_id and trigger.to_state.attributes.current_temperature == none %}
        true
      {% elif 'sensor' in trigger.entity_id %}
        true
      {% else %}
        false
      {% endif %}
  action:
    service: python_script.heating_thermostat_update
    data_template:
      thermostat: >-
        {% if 'thermostat' in trigger.entity_id %}
          {{ trigger.entity_id }}
        {% else %}
          climate.thermostat_{{ trigger.entity_id | replace('sensor.temperature_', '') }}
        {% endif %}
      sensor: >-
        {% if 'sensor' in trigger.entity_id %}
          {{ trigger.entity_id }}
        {% else %}
          sensor.temperature_{{ (trigger.entity_id | replace('climate.thermostat_', '')) }}
        {% endif %}

# uruchamia skrypt aktualizaujący current temp na starcie HA
- id: heating_update_current_temperature_at_start
  alias: 'Heating Update Current Temperature At Start'
  trigger:
    platform: event
    event_type: zwave.network_ready
  action:
    - service: python_script.heating_thermostat_update
      data:
        thermostat: climate.thermostat_antek
        sensor: sensor.temperature_antek
    - service: python_script.heating_thermostat_update
      data:
        thermostat: climate.thermostat_kuchnia
        sensor: sensor.temperature_kuchnia
    - service: python_script.heating_thermostat_update
      data:
        thermostat: climate.thermostat_salon
        sensor: sensor.temperature_salon
    - service: python_script.heating_thermostat_update
      data:
        thermostat: climate.thermostat_antresola
        sensor: sensor.temperature_antresola
    - service: python_script.heating_thermostat_update
      data:
        thermostat: climate.thermostat_sypialnia
        sensor: sensor.temperature_sypialnia
    - service: python_script.heating_thermostat_update
      data:
        thermostat: climate.thermostat_lazienka
        sensor: sensor.temperature_lazienka

##################################################################################################

#### LIGHT #######################################################################################
# włączenie flux przy starcie HA
- id: light_turn_on_flux_at_start
  alias: 'Light Turn On Flux At Start'
  trigger:
    platform: homeassistant
    event: start
  condition:
    condition: state
    entity_id: input_select.light_scenes_salon
    state: 'automatyczny'
  action:
    service: switch.turn_on
    entity_id: switch.flux

# wyłączenie oświetlenia po wyjściu z domu
- id: light_turn_off_when_away_mode
  alias: 'Light Turn Off When Away Mode'
  trigger:
    platform: state
    entity_id: input_boolean.away_mode
    from: 'off'
    to: 'on'
  action:
    service: script.light_away_mode

## SALON ##
# wyłączenie świateł w salonie jeśli nie ma ruchu przez godzinę i jest po północy
- id: light_turn_off_in_salon_when_no_motion_and_after_midnight
  alias: 'Light Turn Off In Salon When No Motion And After Midnight'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_salon
    to: 'off'
    for:
      minutes: 30
  condition:
    condition: and
    conditions:
      - condition: time
        after: '00:30:00'
      - condition: state
        entity_id: media_player.denon
        state: 'off'
      - condition: or
        conditions:
          - condition: state
            entity_id: switch.light_bulbs_salon
            state: 'on'
          - condition: state
            entity_id: light.leds_salon
            state: 'on'
          - condition: state
            entity_id: light.lamp_salon
            state: 'on'
  action:
    service: homeassistant.turn_off
    entity_id:
      - switch.light_bulbs_salon
      - light.leds_salon
      - light.lamp_salon

# wyłączenie switcha od żarówek w salonie gdy żarówki wyłączone jasnością
- id: light_turn_off_salon_bulbs_when_brightness_0
  alias: 'Light Turn Off Salon Bulbs When Brightness 0'
  trigger:
    platform: event
    event_type: state_changed
    event_data:
      entity_id: light.bulbs_salon
      old_state: 'on'
      new_state: 'off'
  condition:
    condition: state
    entity_id: switch.light_bulbs_salon
    state: 'on'
  action:
    service: switch.turn_off
    entity_id: switch.light_bulbs_salon

# automatyczna scena oświetlenia w salonie
- id: light_scene_salon_auto
  alias: 'Light Scene Salon Auto'
  trigger:
    - platform: state
      entity_id: input_select.light_scenes_salon
      to: 'automatyczny'
    - platform: state
      entity_id: light.bulbs_salon
      to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.salon_light_scene_turn_on
    state: 'off'
  action:
    - service: switch.turn_on
      entity_id: switch.flux
    - service: input_select.select_option
      data:
        entity_id: input_select.light_scenes_salon
        option: 'automatyczny'

# wybór sceny oświetlenia w salonie gdy zarówki włączone
- id: light_scene_salon
  alias: 'Light Scene Salon'
  trigger:
    platform: state
    entity_id: input_select.light_scenes_salon
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state != 'automatyczny' }}"
      - condition: template
        value_template: "{{ is_state('light.bulb_salon_1', 'on') and is_state('light.bulb_salon_2', 'on') }}"
  action:
    service: scene.turn_on
    data_template:
      entity_id: scene.{{ trigger.to_state.state }}

# wybór sceny oświetlenia w salonie gdy żarówki wyłączone
- id: light_scene_salon_when_bulbs_off
  alias: 'Light Scene Salon When Bulbs Off'
  trigger:
    platform: state
    entity_id: input_select.light_scenes_salon
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state != 'automatyczny' }}"
      - condition: template
        value_template: "{{ is_state('light.bulbs_salon', 'off') or is_state('light.bulbs_salon', 'unavailable') }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.salon_light_scene_turn_on
    - service: switch.turn_on
      entity_id: switch.light_bulbs_salon

# wybór sceny auto oświetlenia w salonie gdy żarówki wyłączone
- id: light_scene_salon_auto_when_bulbs_off
  alias: 'Light Scene Salon Auto When Bulbs Off'
  trigger:
    platform: state
    entity_id: input_select.light_scenes_salon
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state == 'automatyczny' }}"
      - condition: template
        value_template: "{{ is_state('light.bulbs_salon', 'off') or is_state('light.bulbs_salon', 'unavailable') }}"
  action:
    service: switch.turn_on
    entity_id: switch.light_bulbs_salon

# scena gdy żarówki połączą się z siecią
- id: light_scene_salon_when_bulbs_are_turning_on
  alias: 'Light Scene Salon When Bulbs Are Turning On'
  trigger:
    platform: state
    entity_id: light.bulbs_salon
    to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.salon_light_scene_turn_on
    state: 'on'
  action:
    - service: scene.turn_on
      data_template:
        entity_id: scene.{{ states('input_select.light_scenes_salon') }}
    - service: input_boolean.turn_off
      entity_id: input_boolean.salon_light_scene_turn_on

# włączenie/wyłączenie lampy w salonie
- id: light_toggle_power_salon_lamp
  alias: 'Light Toggle Power Salon Lamp'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_1
        click_type: single
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_2
        click_type: single
  action:
    service: light.toggle
    entity_id: light.lamp_salon

# włączenie/wyłączenie żarówek w salonie
- id: light_toggle_power_salon_bulbs
  alias: 'Light Toggle Power Salon Bulbs'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_1
        click_type: double
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_2
        click_type: double
  action:
    service: switch.toggle
    entity_id: switch.light_bulbs_salon

# włączenie/wyłączenie LEDów w salonie
- id: light_toggle_power_salon_leds
  alias: 'Light Toggle Power Salon LEDs'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_1
        click_type: hold
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_salon_2
        click_type: hold
  action:
    service: light.toggle
    entity_id: light.leds_salon

# włączanie lampy w salonie jak pojawi się ruch lub zrobi się ciemno lub wyłączone światło/TV
- id: light_turn_on_salon_lamp
  alias: 'Light Turn On Salon Lamp'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.motion_salon
        - binary_sensor.motion_antresola_2
      from: 'off'
      to: 'on'
    - platform: numeric_state
      entity_id: sensor.illumination_salon
      below: 10
    - platform: state
      entity_id: light.leds_salon
      from: 'on'
      to: 'off'
    - platform: state
      entity_id: switch.light_bulbs_salon
      from: 'on'
      to: 'off'
    - platform: state
      entity_id: light.lamp_salon
      from: 'on'
      to: 'off'
    - platform: state
      entity_id: media_player.denon
      to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      # - condition: template
      #   value_template: "{{ states('sensor.illumination_salon') | int < 10 or states('sensor.illumination_antresola') | int < 60 }}"
      - condition: state
        entity_id: light.leds_salon
        state: 'off'
      - condition: state
        entity_id: switch.light_bulbs_salon
        state: 'off'
      - condition: state
        entity_id: light.lamp_salon
        state: 'off'
      - condition: state
        entity_id: media_player.denon
        state: 'off'
      - condition: state
        entity_id: binary_sensor.motion_salon
        state: 'on'
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.lamp_salon
      data:
        brightness: 245
        color_temp: 330
    - service: input_boolean.turn_on
      entity_id: input_boolean.salon_light_motion_on

# wyłączenie lampy w salonie jak zniknie ruch lub włączy się światła
- id: light_turn_off_salon_lamp
  alias: 'Light Turn Off Salon Lamp'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_salon
      from: 'on'
      to: 'off'
    - platform: state
      entity_id: light.leds_salon
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: switch.light_bulbs_salon
      from: 'off'
      to: 'on'
  condition:
    condition: state
    entity_id: input_boolean.salon_light_motion_on
    state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.lamp_salon
      data:
        transition: 10
    - service: input_boolean.turn_off
      entity_id: input_boolean.salon_light_motion_on

# Scena oświetlenia salonu film po włączeniu Netflix/Youtube/Dune/gry na PS
- id: light_scene_film
  alias: 'Light Scene Film'
  trigger:
    - platform: template
      value_template: "{{ state_attr('media_player.mibox', 'app_name') == 'Netflix' }}"
    - platform: template
      value_template: "{{ state_attr('media_player.mibox', 'app_name') == 'Showmax' }}"
    - platform: template
      value_template: "{{ state_attr('media_player.mibox', 'app_name') == 'YouTube' }}"
    - platform: template
      value_template: "{{ state_attr('media_player.mibox', 'app_name') == 'Vimeo' }}"
    - platform: template
      value_template: "{{ state_attr('media_player.mibox', 'app_name') == 'HBO GO' }}"
    - platform: template
      value_template: "{{ state_attr('media_player.mibox', 'app_name') == 'Amazon Prime Video' }}"
    - platform: state
      entity_id: sensor.dune_activity
      to: 'file_playback'
    - platform: state
      entity_id: media_player.playstation
      to: 'playing'
  condition:
    condition: and
    conditions:
      - condition: sun
        after: sunset
      - condition: template
        value_template: "{{ is_state('light.leds_salon', 'on') or is_state('switch.light_bulbs_salon', 'on') or is_state('light.lamp_salon', 'on') }}"
      - condition: time
        after: '20:10:00'
      - condition: state
        entity_id: input_boolean.guests
        state: 'off'
  action:
    service: input_select.select_option
    data:
      entity_id: input_select.light_scenes_salon
      option: 'film'

# Scena oświetlenia salonu auto po wyłączeniu filmu
- id: light_scene_auto_after_film
  alias: 'Light Scene Auto After Film'
  trigger:
    - platform: template
      value_template: "{{ state_attr('media_player.mibox', 'app_name') == 'Homescreen' }}"
    - platform: state
      entity_id: sensor.androidtv_activity
      to: 'Uruchom ponownie'
      for:
        seconds: 10
    - platform: state
      entity_id: sensor.dune_activity
      from: 'file_playback'
      to: 'navigator'
      for:
        seconds: 10
    - platform: state
      entity_id: media_player.playstation
      from: 'playing'
      to: 'idle'
      for:
        seconds: 10
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ is_state('light.leds_salon', 'on') or is_state('switch.light_bulbs_salon', 'on') or is_state('light.lamp_salon', 'on') }}"
      - condition: state
        entity_id: input_select.light_scenes_salon
        state: 'film'
  action:
    service: input_select.select_option
    data:
      entity_id: input_select.light_scenes_salon
      option: 'automatyczny'

## ANTRESOLA ##
# włączanie lampki na antresoli jak jest ciemno i jest ruch
- id: light_turn_on_antresola_lamp
  alias: 'Light Turn On Antresola Lamp'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_antresola
    from: 'off'
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      - condition: state
        entity_id: light.gateway_antresola
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.illumination_antresola
        below: 60
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.gateway_antresola
      data_template:
        brightness: 200
        rgb_color: ['{{ (range(0, 255)|random) }}','{{ (range(0, 255)|random) }}','{{ (range(0, 255)|random) }}']
    - service: input_boolean.turn_on
      entity_id: input_boolean.antresola_light_motion_on

# wyłączanie lampki na antresoli jak brak ruchu
- id: light_turn_off_antresola_lamp
  alias: 'Light Turn Off Antresola Lamp'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_antresola
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.antresola_light_motion_on
    state: 'on'
  action:
    - service: homeassistant.turn_off
      entity_id:
        - light.gateway_antresola
        - input_boolean.antresola_light_motion_on

## SYPIALNIA ##
# włączanie LEDów w sypialni jak jest ruch i ciemno
- id: light_turn_on_sypialnia_leds_when_dark_and_motion
  alias: 'Light Turn On Sypialnia LEDs When Dark And Motion'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sypialnia
      from: 'off'
      to: 'on'
    - platform: numeric_state
      entity_id: sensor.illumination_sypialnia
      below: 3
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      - condition: state
        entity_id: light.lightstrip_sypialnia
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.illumination_sypialnia
        below: 3
      - condition: state
        entity_id: binary_sensor.motion_sypialnia
        state: 'on'
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.lightstrip_sypialnia
      data:
        brightness: 200
        rgb_color: [233,96,255]
    - service: input_boolean.turn_on
      entity_id: input_boolean.sypialnia_light_motion_on

# wyłączanie LEDów w sypialni jak brak ruchu
- id: light_turn_off_sypialnia_leds
  alias: 'Light Turn Off Sypialnia LEDs'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sypialnia
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.sypialnia_light_motion_on
    state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.sypialnia_light_motion_on
    - service: light.turn_off
      entity_id: light.lightstrip_sypialnia
      data:
        transition: 10

## PRZEDPOKÓJ ##
# włączanie LEDów w przedpokoju jak jest ruch i ciemno
- id: light_turn_on_przedpokoj_leds_when_dark_and_motion
  alias: 'Light Turn On Przedpokoj LEDs When Dark And Motion'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_przedpokoj
      from: 'off'
      to: 'on'
    - platform: numeric_state
      entity_id: sensor.illumination_przedpokoj
      below: 9
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: light.leds_przedpokoj
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.illumination_przedpokoj
        below: 9
      - condition: state
        entity_id: binary_sensor.motion_przedpokoj
        state: 'on'
      - condition: state
        entity_id: switch.light_bulbs_salon
        state: 'off'
      - condition: state
        entity_id: light.leds_salon
        state: 'off'
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.leds_przedpokoj
    - service: input_boolean.turn_on
      entity_id: input_boolean.przedpokoj_light_motion_on

# wyłączanie LEDów w przedpokoju jak brak ruchu
- id: light_turn_off_przedpokoj_leds
  alias: 'Light Turn Off Przedpokoj LEDs'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_przedpokoj
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.przedpokoj_light_motion_on
    state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.przedpokoj_light_motion_on
    - service: light.turn_off
      entity_id: light.leds_przedpokoj

## POKÓJ ANTKA ##
# włączanie LEDów w pokoju Antka jak natężenie światła spadnie poniżej 3 i jest ruch
- id: light_turn_on_antek_leds_when_dark_and_motion
  alias: 'Light Turn On Antek LEDs When Dark And Motion'
  trigger:
    - platform: numeric_state
      entity_id: sensor.illumination_antek
      below: 3
    - platform: state
      entity_id: binary_sensor.motion_antek
      from: 'off'
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      - condition: state
        entity_id: binary_sensor.motion_antek
        state: 'on'
      - condition: numeric_state
        entity_id: sensor.illumination_antek
        below: 3
      - condition: state
        entity_id: light.lightstrip_antek
        state: 'off'
      - condition: state
        entity_id: input_boolean.antek_lamp_night
        state: 'off'
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: script.light_turn_on_antek_leds
    - service: light.turn_on
      entity_id: light.cabinet_antek
    - service: input_boolean.turn_on
      entity_id: input_boolean.antek_light_motion_on

# wyłączanie LEDów w pokoju Antka jak brak ruchu
- id: light_turn_off_antek_leds_via_motion
  alias: 'Light Turn Off Antek LEDs Via Motion'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_antek
    from: 'on'
    to: 'off'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.antek_light_motion_on
        state: 'on'
  action:
    - service: script.light_turn_off_antek_leds
    - service: light.turn_off
      entity_id: light.cabinet_antek

# włączanie LEDów w pokoju Antka w tryb nocny
- id: light_turn_on_antek_leds_night
  alias: 'Light Turn On Antek LEDs Night'
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_light_antek
      click_type: hold
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      - condition: state
        entity_id: input_boolean.antek_lamp_night
        state: 'off'
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.lightstrip_antek
      data:
        brightness: 15
        rgb_color: [255,190,0]
    - service: input_boolean.turn_on
      entity_id: input_boolean.antek_lamp_night
    - service: input_boolean.turn_off
      entity_id: input_boolean.antek_light_motion_on

# wyłączanie LEDów w pokoju Antka z trybu nocnego
- id: light_turn_off_antek_leds_night
  alias: 'Light Turn Off Antek LEDs Night'
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_light_antek
      click_type: hold
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      - condition: state
        entity_id: input_boolean.antek_lamp_night
        state: 'on'
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: script.light_turn_on_antek_leds
    - service: input_boolean.turn_off
      entity_id: input_boolean.antek_lamp_night

# wyłączanie LEDów w pokoju Antka jak wschód słońca
- id: light_turn_off_antek_leds_at_sunrise
  alias: 'Light Turn Off Antek LEDs At Sunrise'
  trigger:
    platform: sun
    event: sunrise
  condition:
    condition: state
    entity_id: light.lightstrip_antek
    state: 'on'
  action:
    service: script.light_turn_off_antek_leds

# włączenie LEDów w pokoju Antka
- id: light_turn_on_antek_leds_via_switch
  alias: 'Light Turn On Antek LEDs Via Switch'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_antek
        click_type: single
  condition:
    condition: state
    entity_id: light.lightstrip_antek
    state: 'off'
  action:
    service: script.light_turn_on_antek_leds

# wyłączenie LEDów w pokoju Antka
- id: light_turn_off_antek_leds_via_switch
  alias: 'Light Turn Off Antek LEDs Via Switch'
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_light_antek
      click_type: single
  condition:
    condition: state
    entity_id: light.lightstrip_antek
    state: 'on'
  action:
    service: light.turn_off
    entity_id: light.lightstrip_antek

# włączenie/wyłączenie ledów w gablocie w pokoju Antka
- id: light_toggle_antek_cabinet
  alias: 'Light toggle Antek Cabinet'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.click
      event_data:
        entity_id: binary_sensor.switch_light_antek
        click_type: double
  action:
    service: light.toggle
    entity_id: light.cabinet_antek

# wyłączanie oświetlenia gabloty w pokoju Antka o 22, 23, 00
- id: light_turn_off_antek_cabinet_at_night
  alias: 'Light Turn Off Antek Cabinet At Night'
  trigger:
    - platform: time
      at: '22:00:00'
    - platform: time
      at: '23:00:00'
    - platform: time
      at: '00:00:00'
  condition:
    condition: state
    entity_id: light.cabinet_antek
    state: 'on'
  action:
    service: light.turn_off
    entity_id: light.cabinet_antek

#### PRACOWNIA ####
# włączanie lampki w pracowni jak ruch i ciemno
- id: light_turn_on_pracownia_lamp_when_dark_and_motion
  alias: 'Light Turn On Pracownia Lamp When Dark And Motion'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_pracownia
      from: 'off'
      to: 'on'
    - platform: numeric_state
      entity_id: sensor.illumination_pracownia
      below: 8
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      - condition: state
        entity_id: light.lamp_pracownia
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.illumination_pracownia
        below: 8
      - condition: state
        entity_id: binary_sensor.motion_pracownia
        state: 'on'
      - condition: or
        conditions:
          - condition: sun
            after: sunset
          - condition: sun
            before: sunrise
  action:
    - service: light.turn_on
      entity_id: light.lamp_pracownia
    - service: input_boolean.turn_on
      entity_id: input_boolean.pracownia_light_motion_on

# wyłączanie lampki w pracowni jak brak ruchu
- id: light_turn_off_pracownia_lamp
  alias: 'Light Turn Off Pracownia Lamp'
  trigger:
    platform: state
    entity_id: binary_sensor.motion_pracownia
    from: 'on'
    to: 'off'
  condition:
    condition: state
    entity_id: input_boolean.pracownia_light_motion_on
    state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.pracownia_light_motion_on
    - service: light.turn_off
      entity_id: light.lamp_pracownia

##################################################################################################

#### HARMONY #####################################################################################
- id: harmony_turn_off_tv
  alias: 'Harmony Turn Off TV'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'PowerOff' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'wyłączony'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_telewizja
  alias: 'Harmony Starts Telewizja'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'Telewizja' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'telewizja'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_filmy
  alias: 'Harmony Starts Filmy'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'Filmy' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'filmy'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_radio
  alias: 'Harmony Starts Radio'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'Radio' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'radio'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_spotify
  alias: 'Harmony Starts Spotify'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'Spotify' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'Spotify'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command
    - service: mqtt.publish
      data:
        topic: 'homeassistant/androidtv/run'
        payload: 'Spotify'

- id: harmony_starts_vod
  alias: 'Harmony Starts VoD'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'VoD' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'VoD'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: harmony_starts_playstation
  alias: 'Harmony Starts PlayStation'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'PlayStation' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'PlayStation'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command
    - service: switch.turn_on
      entity_id: switch.playstation

- id: harmony_starts_xbox
  alias: 'Harmony Starts Xbox'
  trigger:
    platform: state
    entity_id: remote.salon
  condition:
    condition: template
    value_template: "{{ trigger.to_state.attributes.current_activity == 'Xbox' }}"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.harmony_command
    - service: input_select.select_option
      entity_id: input_select.salon_harmony
      data:
        option: 'Xbox'
    - service: input_boolean.turn_off
      entity_id: input_boolean.harmony_command

- id: hass_turn_off_tv
  alias: 'HASS Turn Off TV'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'wyłączony'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    service: script.turn_on
    entity_id: script.harmony_tv_off

- id: hass_starts_telewizja
  alias: 'HASS Starts Telewizja'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'telewizja'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    service: script.turn_on
    entity_id: script.harmony_telewizja

- id: hass_starts_filmy
  alias: 'HASS Starts Filmy'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'filmy'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    service: script.turn_on
    entity_id: script.harmony_filmy

- id: hass_starts_radio
  alias: 'HASS Starts Radio'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'radio'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    service: script.turn_on
    entity_id: script.harmony_radio

- id: hass_starts_spotify
  alias: 'HASS Starts Spotify'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'Spotify'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    service: script.turn_on
    entity_id: script.harmony_spotify

- id: hass_starts_vod
  alias: 'HASS Starts VoD'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'VoD'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    service: script.turn_on
    entity_id: script.harmony_vod

- id: hass_starts_playstation
  alias: 'HASS Starts PlayStation'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'PlayStation'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    - service: script.turn_on
      entity_id: script.harmony_playstation
    - condition: template
      value_template: "{{ trigger.from_state.state == 'wyłączony' }}"
    - service: switch.turn_on
      entity_id: switch.playstation

- id: hass_starts_xbox
  alias: 'HASS Starts Xbox'
  trigger:
    platform: state
    entity_id: input_select.salon_harmony
    to: 'Xbox'
  condition:
    condition: state
    entity_id: input_boolean.harmony_command
    state: 'off'
  action:
    service: script.turn_on
    entity_id: script.harmony_xbox

##################################################################################################

#### CLIMATE ######################################################################################
# włączenie nawilżacza jak wilgotność poniżej 39% i sezon grzewczy
- id: humidification_start
  alias: 'Humidification Start'
  trigger:
    platform: numeric_state
    entity_id: sensor.humidity_salon
    below: 39
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.heating_season
        state: 'on'
      - condition: state
        entity_id: input_boolean.heating_airing
        state: 'off'
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'
      - condition: state
        entity_id: fan.humidifier_salon
        state: 'off'
  action:
    service: fan.turn_on
    entity_id: fan.humidifier_salon

# wyłączenie nawilżacza jak wilgotność powyżej 41% i sezon grzewczy
- id: humidification_stop
  alias: 'Humidification Stop'
  trigger:
    platform: numeric_state
    entity_id: sensor.humidity_salon
    above: 41
  condition:
    - condition: state
      entity_id: input_boolean.heating_season
      state: 'on'
    - condition: state
      entity_id: fan.humidifier_salon
      state: 'on'
  action:
    service: fan.turn_off
    entity_id: fan.humidifier_salon

##################################################################################################

#### OTHERS ######################################################################################
- id: log_level
  alias: 'Log Level'
  trigger:
    platform: state
    entity_id: input_select.log_level
  action:
    service: logger.set_level
    data_template:
      homeassistant.components: '{{ trigger.to_state.state }}'

- id: shellies_announce
  alias: 'Shellies Announce'
  trigger:
    - platform: homeassistant
      event: start
  action:
    service: mqtt.publish
    data:
      topic: shellies/command
      payload: announce

## CHRISTMAS LIGHTS ##
- id: light_turn_on_christmas_lights
  alias: 'Light Turn On Christmas Lights'
  trigger:
    platform: sun
    event: sunset
    offset: '-01:00:00'
  action:
    service: light.turn_on
    entity_id:
      - light.christmas_balkon_dol
      - light.christmas_balkon_gora

- id: light_turn_off_christmas_lights
  alias: 'Light Turn Off Christmas Lights'
  trigger:
    platform: time
    at: '23:00:00'
  action:
    service: light.turn_off
    entity_id:
      - light.christmas_balkon_dol
      - light.christmas_balkon_gora
