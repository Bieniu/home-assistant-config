substitutions:
  device_name: "Sonoff Basic 067C81"
  device_name_lower: "sonoff_basic_067c81"
  device_hostname: "sonoff-basic-067c81"

esphome:
  name: ${device_name_lower}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_hostname}
  domain: !secret local_domain
  ap:
    ssid: ${device_name}
    password: !secret esphome_password

captive_portal:

logger:

api:
  password: !secret esphome_password

ota:
  password: !secret esphome_password

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: gpio
    id: button
    internal: true
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      - switch.toggle: relay

switch:
  - platform: gpio
    id: relay
    pin: GPIO12
    name: "${device_name} Relay"

  - platform: restart
    name: "${device_name} Restart"

status_led:
  pin:
    number: GPIO13
    inverted: true

sensor:
  - platform: uptime
    id: uptime_sec
    internal: true

  - platform: wifi_signal
    name: "${device_name} WiFi Signal"
    update_interval: 300s
    device_class: "signal_strength"

text_sensor:
  - platform: template
    name: "${device_name} Uptime"
    update_interval: 300s
    icon: mdi:timer-outline
    lambda: |-
      auto time = id(homeassistant_time).now();
      if (time.is_valid()) {
        int uptime_seconds = int(id(uptime_sec).state);
        int time_timestamp = int(time.timestamp);
        int uptime_timestamp = { time_timestamp - uptime_seconds };
        auto uptime_text = id(homeassistant_time).now().from_epoch_local(uptime_timestamp).strftime("%Y-%m-%d %H:%M:%S");
        return uptime_text;
      } else {
        return {};
      }
