- platform: moon

- platform: rest
  name: "ESPHome Version Current"
  resource: "https://api.github.com/repos/esphome/esphome/releases/latest"
  value_template: "{{ value_json.tag_name | replace('v', '') }}"
  username: !secret github_username
  password: !secret github_token_access
  authentication: basic
  scan_interval: 7200
  headers:
    Accept: application/vnd.github.v3+json
    Content-Type: application/json
    User-Agent: Home Assistant REST sensor

- platform: rest
  name: "Caddy Version Current"
  resource: "https://api.github.com/repos/mholt/caddy/releases/latest"
  value_template: "{{ value_json.tag_name | replace('v', '') }}"
  username: !secret github_username
  password: !secret github_token_access
  authentication: basic
  scan_interval: 7200
  headers:
    Accept: application/vnd.github.v3+json
    Content-Type: application/json
    User-Agent: Home Assistant REST sensor

- platform: command_line
  name: "Supervisor Updates"
  command: 'curl http://supervisor/supervisor/info -H "Authorization: Bearer $(printenv SUPERVISOR_TOKEN)" | jq ''{"newest_version":.data.version_latest,"current_version":.data.version,"update_available":.data.update_available,"addons":[.data.addons[] | select(.update_available)]}'''
  value_template: "{{ value_json.addons | length }}"
  unit_of_measurement: "pending update(s)"
  json_attributes:
    - update_available
    - newest_version
    - current_version
    - addons

- platform: sql
  db_url: !secret mysql_db_url
  queries:
    - name: "HA Database Size"
      query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) / 1024 / 1024, 1) "value" FROM information_schema.tables WHERE table_schema="homeassistant" GROUP BY table_schema;'
      column: "value"
      unit_of_measurement: "MB"

- platform: version
  name: "HA Version Installed"

- platform: version
  name: "HA Version Current"
  source: hassio
  image: intel-nuc

- platform: uptime
  name: "Home Assistant Last Restart"

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: memory_use_percent
    - type: processor_use
    - type: last_boot

- platform: darksky
  api_key: !secret darksky_api_key
  scan_interval:
    minutes: 15
  language: "pl"
  forecast:
    - 1
    - 2
    - 3
    - 4
    - 5
  monitored_conditions:
    - icon
    - summary
    - temperature_high
    - temperature_low
    - apparent_temperature
    - wind_speed
    - wind_bearing
    - precip_probability
    - precip_intensity
    - daily_summary

- platform: min_max
  type: mean
  name: "Temperature Indoor"
  entity_ids:
    - sensor.temperature_kuchnia
    - sensor.temperature_salon
    - sensor.temperature_antresola
    - sensor.temperature_gabinet
    - sensor.temperature_antek
    - sensor.temperature_sypialnia
    - sensor.temperature_lazienka
    - sensor.temperature_goscinny
    - sensor.temperature_pracownia
    - sensor.temperature_pralnia
  round_digits: 1

- platform: min_max
  type: mean
  name: "Humidity Indoor"
  entity_ids:
    - sensor.humidity_kuchnia
    - sensor.humidity_salon
    - sensor.humidity_antresola
    - sensor.humidity_gabinet
    - sensor.humidity_antek
    - sensor.humidity_sypialnia
    - sensor.humidity_lazienka
    - sensor.humidity_goscinny
    - sensor.humidity_pracownia
    - sensor.humidity_pralnia
  round_digits: 0

- platform: template
  sensors:
    dishwasher_kuchnia:
      friendly_name: "Zmywarka"
      value_template: >-
        {% if states('sensor.dishwasher_kuchnia_power') != ('unavailable' or 'unknown') %}
          {% if states('sensor.dishwasher_kuchnia_power') | int > 1 %}
            zmywanie
          {% else %}
            wyłączona
          {% endif %}
        {% else %}
          {{ states('sensor.dishwasher_kuchnia') }}
        {% endif %}

    airly_info:
      friendly_name: "Jakość powietrza"
      value_template: >-
        {% if state_attr('air_quality.airly', 'air_quality_index') | int <= 25 %}
          bardzo dobra
        {% elif state_attr('air_quality.airly', 'air_quality_index') | int <= 50 %}
          dobra
        {% elif state_attr('air_quality.airly', 'air_quality_index') | int <= 75 %}
          średnia
        {% elif state_attr('air_quality.airly', 'air_quality_index') | int <= 100 %}
          zła
        {% elif state_attr('air_quality.airly', 'air_quality_index') | int > 100 %}
          bardzo zła
        {% endif %}

    airly_pm10:
      friendly_name: "PM10"
      unit_of_measurement: "µg/m³"
      value_template: "{{ state_attr('air_quality.airly', 'particulate_matter_10') }}"

    airly_pm2_5:
      friendly_name: "PM2.5"
      unit_of_measurement: "µg/m³"
      value_template: "{{ state_attr('air_quality.airly', 'particulate_matter_2_5') }}"

    humidifier_water_level:
      friendly_name: "Poziom wody"
      unit_of_measurement: "%"
      value_template: >-
        {% if state_attr('fan.humidifier_salon', 'depth') is number %}
          {% if state_attr('fan.humidifier_salon', 'depth') < 127 %}
            {{ (state_attr('fan.humidifier_salon', 'depth') * 0.89 - 11.6) | round | min(100) | max(0) }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}

    ups_status:
      friendly_name: "Status"
      value_template: >-
        {% if is_state('sensor.ups_status_data', 'OL') %}
          zasilanie sieciowe
        {% elif is_state('sensor.ups_status_data', 'OL CHRG') or is_state('sensor.ups_status_data', 'OL CHRG LB')%}
          ładowanie baterii
        {% elif is_state('sensor.ups_status_data', 'OL DISCHRG') %}
          zasilanie bateryjne
        {% elif is_state('sensor.ups_status_data', 'OB DISCHRG') %}
          zasilanie bateryjne
        {% elif is_state('sensor.ups_status_data', 'LB') %}
          słaba bateria
        {% elif is_state('sensor.ups_status_data', 'SD') or is_state('sensor.ups_status_data', 'FSD OB DISCHRG') %}
          wyłączanie
        {% else %}
          {{ states('sensor.ups_status_data') }}
        {% endif %}

    sum_power:
      friendly_name: "Oświetlenie + serwery + zmywarka"
      unit_of_measurement: "W"
      value_template: >-
        {{ (states('sensor.light_salon_power') | float +
           states('sensor.tree_antek_power') | float +
           states('sensor.light_gabinet_power') | float +
           states('sensor.light_kuchnia_power') | float +
           states('sensor.light_wc_power') | float +
           states('sensor.christmas_tree_salon_power') | float +
           states('sensor.christmas_lights_balkon_gora_power') | float +
           states('sensor.christmas_lights_antresola_power') | float +
           states('sensor.servers_gabinet_power') | float +
           states('sensor.dishwasher_kuchnia_power') | float +
           states('sensor.light_lazienka_power') | float) | round(1) }}